{"version":3,"sources":["helpers/BEM.js","redux/actions/index.js","redux/reducers/memory.red.js","helpers/consts.js","redux/reducers/pinsInfo.red.js","hooks/reactRedux.hks.js","redux/reducers/visualizationSettings.red.js","hooks/memoryView.hks.js","components/ToggleButtons/ToggleButtons.js","components/Memory/Memory.js","components/PinsBlock/Pin/Pin.js","components/PinsBlock/CrossPinsNotation/CrossPinsNotation.js","hooks/index.js","components/PinsBlock/PinsBlock.js","components/MemoryControls/DataControls.js","components/MemoryControls/AddressControls.js","components/MemoryControls/StateControls.js","components/MemoryControls/ClockControls.js","components/MemoryControls/MemoryControls.js","components/VisualizationSettings/VisualizationSettings.js","components/RamVisualization/RamVisualization.js","serviceWorker.js","redux/reducers/index.js","redux/sagas/index.js","store.js","index.js"],"names":["getBEMPAth","b","e","m","base","join","reduce","str","elementName","modifiers","Array","isArray","filter","Boolean","Object","entries","value","map","a","men","women","mars","venera","setPins","type","payload","setClockPin","setAddressRowPins","setAddressColPins","setSelectedRowInMemory","setSelectedColInMemory","setPinsTypeWidth","width","setIsPinNotationClassical","isClassical","setMemoryDisplayType","displayType","setIsTactingEnabled","isEnabled","setIsRasCasEnabled","setDatumInMemory","datum","address","readDatumFromMemory","setMemory","data","setTacts","numberOfTacts","setCurrentTacts","initialState","memoryArray","fill","isDirty","selectedAddress","undefined","row","col","memory","state","action","update","parseInt","selectMemory","path","selectSelectedRow","selectSelectedColumn","MEMORY_MODE","MEMORY_STATE","PINS","PIN_STATE","ON","OFF","VIEW_OPTIONS","label","repeat","pinsInfo","tacts","currentTacts","updatedValue","padStart","slice","length","selectData","selectDataWidth","selectAddressWidth","selectEnabled","selectMemoryMode","selectClock","selectTacts","selectCurrentTacts","selectRas","selectCas","selectAddressRowPins","selectAddressColPins","selectAddressPins","addressRow","addressColumn","useAction","actionFn","dispatch","useDispatch","memedAct","useMemo","useCallback","apply","arguments","isPinsNotationClassical","isTactingEnabled","isRasCasEnabled","memoryDisplayType","visualizationSettings","selectIsPinNotationClassical","selectIsTactingEnabled","selectMemoryDisplayType","selectIsRasCasEnabled","useCellOrder","addressLength","useSelector","totalColumns","Math","pow","floor","cellIndex","column","totalRows","useReadWriteMemoryDatum","setPinsAct","setSelectedRowInMemoryAct","setSelectedColInMemoryAct","readDatumFromMemoryAct","memorizedInfo","setDatumInMemoryAct","rasAddr","casAddr","dataWidth","memoryMode","selectedRow","selectedCol","isRas","useEffect","setDatum","BEM","ToggleButtons","options","handleSelect","selectedValue","containerClassName","onSelect","className","key","onClick","Memory","setMemoryDisplayTypeAct","preselectedCol","selectedColumn","preselectedRow","addressWidth","preselectedAddress","isFullAddressSelected","dataLength","getCellOrder","cellWidth","cellHeight","containerWidth","containerHeight","ceil","widthForChar","cellY","cellX","textX","textY","cellMargin","colIndex","x","y","rowIndex","verticalOffset","fontSize","rowWidth","rowHeight","colWidth","colHeight","useMemoryCSSMeasures","getCellCoordinates","getColCoordinates","getRowCoordinates","headerHeight","renderColumnHeader","text","style","minHeight","cell","preselectedAddressStyles","selectedAddressStyles","dirtyAddressStyles","height","id","r","index","isShowSelected","isSelected","isPreselected","console","log","transform","Pin","pinState","pinWidth","handleDataPinClick","isDisabled","isNotationClassical","isOneOfMany","significance","x1","y1","x2","y2","CrossPinsNotation","numberOfPins","crossedNotationYPosition","PIN_HEIGHT","previousIsNotationClassical","initialValue","prev","useRef","current","usePrevious","PinsBlock","binaryData","setBinaryData","useState","split","binaryDataArray","setBinaryDataArray","viewBoxWidth","DEFAULT_PIN_WIDTH","getIsFirstOrLastPin","includes","pinIndex","updatedPinValue","Number","updatedDataArray","renderPin","pin","defaultPinWidth","viewBox","DataControls","setPinsWidthAct","name","min","max","defaultValue","onInput","ev","target","AddressControls","ras","cas","setAddressRowPinsAct","setAddressColPinsAct","padLength","addressPins","step","StateControls","enabled","setMemoryState","readWrite","setEnabled","ClockControls","clock","setTactsAct","setClockPinAct","resetClockTimeout","setTimeout","clearTimeout","useTacting","handleClock","onChange","pinNotationOptions","MemoryControls","setIsPinNotationClassicalAct","isPinNotationClassical","setMemoryAct","compose","useControlMemoryDatumWidth","VisualizationSettings","setIsTactingEnabledAct","setCurrentTactsAct","setIsRasCasEnabledAct","checked","RamVisualization","window","location","hostname","match","combineReducers","onReadDatumFromMemory","resetAddressRowAndCol","onWidthChange","enableRasCasPins","onSetTacting","updateNumberOfTacts","rootSaga","delay","time","Promise","resolve","select","put","call","updatedMemory","memoryCell","ramLatency","all","takeEvery","sagaMiddleware","createSagaMiddleware","composeEnhancers","composeWithDevTools","configureStore","store","createStore","reducers","applyMiddleware","run","sagas","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.32536272.chunk.js","sourcesContent":["// Author: neformal13 https://gist.github.com/neformal13/00ac31d02eedf669768bd106482d2d3c\ntype Modifier = any[] | Record<string, any>;\ntype B = (b: string) => (elementName?: string | Modifier, modifiers?: Modifier) => string;\ntype GetBEMPAth = (b: string, e: string, m: string[]) => string;\n\nconst ELEMENT_SEPARATOR = \"__\";\nconst MODIFIER_SEPARATOR = \"_\";\n\nconst getBEMPAth: GetBEMPAth = (b, e, m) => {\n  const base = e !== \"\" ? [b, e].join(ELEMENT_SEPARATOR) : b;\n\n  return `${base} ${m.reduce((str, m) => `${str} ${base}${MODIFIER_SEPARATOR}${m}`, \"\")}`;\n};\n\nconst b: B =\n  (b) =>\n  (elementName, modifiers = []) => {\n    modifiers = typeof elementName === \"string\" ? modifiers : elementName || [];\n\n    return getBEMPAth(\n      b,\n      typeof elementName === \"string\" ? elementName : \"\",\n      Array.isArray(modifiers)\n        ? modifiers.filter(Boolean)\n        : Object.entries(modifiers)\n            .filter(([, value]) => Boolean(value))\n            .map(([key]) => key)\n    );\n  };\n\nexport default b;\n\n// Tests\nconst a = b(\"Hello\"); /*?*/\na(); /*?*/\na([\"men\", \"women\"]); /*?*/\na({ men: true, women: false }); /*?*/\na(\"world\"); /*?*/\na(\"world\", [\"mars\", \"venera\"]); /*?*/\na(\"world\", { mars: true, venera: false }); /*?*/\n","export const SET_PINS_WIDTH = \"SET_PINS_WIDTH\";\nexport const SET_PINS = \"SET_PINS\";\n\nexport const SET_CLOCK_PIN = \"SET_CLOCK_PIN\";\n\n// These actions are used for RAS / CAS mode,\n// when row and column address are set separately\nexport const SET_RAS_PIN = \"SET_RAS_PIN\";\nexport const SET_CAS_PIN = \"SET_CAS_PIN\";\n\nexport const SET_ADDRESS_ROW_PINS = \"SET_ADDRESS_ROW_PINS\";\nexport const SET_ADDRESS_COL_PINS = \"SET_ADDRESS_COL_PINS\";\n\nexport const SET_MEMORY = \"SET_MEMORY\";\nexport const SET_TACTS = \"SET_TACTS\";\nexport const SET_CURRENT_TACTS = \"SET_CURRENT_TACTS\";\n\nexport const TOGGLE_RAS_CAS = \"TOGGLE_RAS_CAS\";\n\nexport const WRITE_DATUM_IN_MEMORY = \"WRITE_DATUM_IN_MEMORY\";\nexport const READ_DATUM_FROM_MEMORY = \"READ_DATUM_FROM_MEMORY\";\n\nexport const SET_IS_PIN_NOTATION_CLASSICAL = \"SET_IS_PIN_NOTATION_CLASSICAL\";\nexport const SET_IS_TACTING_ENABLED = \"SET_IS_TACTING_ENABLED\";\nexport const SET_IS_RAS_CAS_ENABLED = \"SET_IS_RAS_CAS_ENABLED\";\nexport const SET_MEMORY_DISPLAY_TYPE = \"SET_MEMORY_DISPLAY_TYPE\";\n\nexport const SET_SELECTED_ROW_IN_MEMORY = \"SET_SELECTED_ROW_IN_MEMORY\";\nexport const SET_SELECTED_COL_IN_MEMORY = \"SET_SELECTED_COL_IN_MEMORY\";\nexport const SET_SELECTED_ADDRESS_IN_MEMORY = \"SET_SELECTED_ADDRESS_IN_MEMORY\";\n\nexport const RESET_MEMORY = \"RESET_MEMORY\";\nexport const RESET_PINS = \"RESET_PINS\";\nexport const resetMemory = (width = undefined) => ({ type: RESET_MEMORY, payload: { width } });\n\nexport const setPins = (type, value) => ({ type: SET_PINS, payload: { type, value } });\n\nexport const setClockPin = (value) => ({ type: SET_CLOCK_PIN, payload: value });\n\nexport const setRas = (value) => ({ type: SET_RAS_PIN, payload: value });\nexport const setCas = (value) => ({ type: SET_CAS_PIN, payload: value });\n\nexport const setAddressRowPins = (value) => ({ type: SET_ADDRESS_ROW_PINS, payload: value });\nexport const setAddressColPins = (value) => ({ type: SET_ADDRESS_COL_PINS, payload: value });\n\nexport const setSelectedRowInMemory = (value) => ({ type: SET_SELECTED_ROW_IN_MEMORY, payload: value });\nexport const setSelectedColInMemory = (value) => ({ type: SET_SELECTED_COL_IN_MEMORY, payload: value });\nexport const setSelectedAddressInMemory = (value) => ({ type: SET_SELECTED_ADDRESS_IN_MEMORY, payload: value });\n\nexport const setPinsTypeWidth = (type, width) => ({ type: SET_PINS_WIDTH, payload: { type, width } });\n\nexport const setIsPinNotationClassical = (isClassical) => ({\n  type: SET_IS_PIN_NOTATION_CLASSICAL,\n  payload: { isClassical },\n});\n\nexport const setMemoryDisplayType = (displayType) => ({\n  type: SET_MEMORY_DISPLAY_TYPE,\n  payload: { displayType },\n});\n\nexport const setIsTactingEnabled = (isEnabled) => ({\n  type: SET_IS_TACTING_ENABLED,\n  payload: { isEnabled },\n});\n\nexport const setIsRasCasEnabled = (isEnabled) => ({\n  type: SET_IS_RAS_CAS_ENABLED,\n  payload: { isEnabled },\n});\n\nexport const setDatumInMemory = (datum, address) => ({\n  type: WRITE_DATUM_IN_MEMORY,\n  payload: {\n    datum,\n    address,\n  },\n});\n\nexport const readDatumFromMemory = (address) => ({\n  type: READ_DATUM_FROM_MEMORY,\n  payload: {\n    address,\n  },\n});\n\nexport const setMemory = (data) => {\n  return {\n    type: SET_MEMORY,\n    payload: {\n      data,\n    },\n  };\n};\n\nexport const setTacts = (numberOfTacts) => ({ type: SET_TACTS, payload: numberOfTacts });\nexport const setCurrentTacts = (numberOfTacts) => ({ type: SET_CURRENT_TACTS, payload: numberOfTacts });\n\nexport const toggleRasCas = () => ({ type: TOGGLE_RAS_CAS });\n","import {\n  SET_MEMORY,\n  WRITE_DATUM_IN_MEMORY,\n  SET_SELECTED_ADDRESS_IN_MEMORY,\n  SET_SELECTED_ROW_IN_MEMORY,\n  SET_SELECTED_COL_IN_MEMORY,\n} from \"../actions\";\nimport { path, update } from \"ramda\";\n\nconst initialState = {\n  memoryArray: new Array(16).fill({ datum: \"0000\", isDirty: false }),\n  selectedAddress: { address: undefined, row: undefined, col: undefined },\n};\n\nconst memory = (state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_SELECTED_ADDRESS_IN_MEMORY: {\n      return {\n        ...state,\n        selectedAddress: { col: undefined, row: undefined, address: payload },\n      };\n    }\n    case SET_SELECTED_ROW_IN_MEMORY: {\n      return {\n        ...state,\n        selectedAddress: { ...state.selectedAddress, row: payload },\n      };\n    }\n    case SET_SELECTED_COL_IN_MEMORY: {\n      return {\n        ...state,\n        selectedAddress: { ...state.selectedAddress, col: payload },\n      };\n    }\n    case WRITE_DATUM_IN_MEMORY: {\n      const { address, datum } = payload;\n      return {\n        ...state,\n        memoryArray: update(parseInt(address, 2), { datum, isDirty: true })(state.memoryArray),\n      };\n    }\n    case SET_MEMORY: {\n      return { ...state, memoryArray: payload.data };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default memory;\n\nexport const selectMemory = (state) => path([\"memory\", \"memoryArray\"], state);\n\nexport const selectSelectedRow = (state) => path([\"memory\", \"selectedAddress\", \"row\"], state);\nexport const selectSelectedColumn = (state) => path([\"memory\", \"selectedAddress\", \"col\"], state);\nexport const selectSelectedAddress = (state) => path([\"memory\", \"selectedAddress\", \"address\"], state);\n","export const MEMORY_MODE = {\n  READ: \"1\",\n  WRITE: \"0\",\n};\n\nexport const MEMORY_STATE = {\n  ENABLED: \"1\",\n  DISABLED: \"0\",\n};\n\nexport const PINS = {\n  RAS: \"RAS\",\n  CAS: \"CAS\",\n  CLOCK: \"clock\",\n  DATA: \"data\",\n  ADDRESS: \"address\",\n  ENABLED: \"enabled\",\n  READ_WRITE: \"readWrite\",\n};\n\nexport const PIN_STATE = {\n  ON: \"1\",\n  OFF: \"0\",\n};\n\nexport const VIEW_OPTIONS = [\n  { value: \"table\", label: \"Table View\" },\n  { value: \"matrix\", label: \"Matrix View\" },\n];\n\n// styling consts\nexport const PIN_HEIGHT = 20;\nexport const DEFAULT_PIN_WIDTH = 80;\nexport const PIN_LABEL_MARGIN = 3;\nexport const SIGNIFICANCE_TEXT_WIDTH = 25;\n","import { path, slice } from \"ramda\";\nimport {\n  SET_PINS,\n  SET_PINS_WIDTH,\n  SET_TACTS,\n  SET_CURRENT_TACTS,\n  SET_RAS_PIN,\n  SET_CAS_PIN,\n  TOGGLE_RAS_CAS,\n  SET_CLOCK_PIN,\n  SET_ADDRESS_ROW_PINS,\n  SET_ADDRESS_COL_PINS,\n} from \"../actions\";\nimport { MEMORY_MODE, MEMORY_STATE, PIN_STATE, PINS } from \"../../helpers/consts\";\n\nconst initialState = {\n  address: PIN_STATE.OFF.repeat(4),\n  row: PIN_STATE.OFF.repeat(2),\n  col: PIN_STATE.OFF.repeat(2),\n  [PINS.RAS]: PIN_STATE.OFF,\n  [PINS.CAS]: PIN_STATE.OFF,\n  addressWidth: 4,\n  data: PIN_STATE.OFF.repeat(4),\n  dataWidth: 4,\n  enabled: MEMORY_STATE.ENABLED,\n  readWrite: MEMORY_MODE.WRITE,\n  clock: PIN_STATE.OFF,\n  tacts: 4,\n  currentTacts: 0,\n};\n\nconst pinsInfo = (state = initialState, action) => {\n  const { payload } = action;\n  switch (action.type) {\n    case SET_RAS_PIN:\n      return {\n        ...state,\n        [PINS.RAS]: payload,\n      };\n    case SET_CAS_PIN:\n      return {\n        ...state,\n        [PINS.CAS]: payload,\n      };\n    case SET_ADDRESS_ROW_PINS:\n      return {\n        ...state,\n        row: payload,\n      };\n    case SET_ADDRESS_COL_PINS:\n      return {\n        ...state,\n        col: payload,\n      };\n    case SET_CLOCK_PIN:\n      return {\n        ...state,\n        [PINS.CLOCK]: payload,\n      };\n\n    case SET_PINS:\n      return { ...state, [payload.type]: payload.value };\n\n    case TOGGLE_RAS_CAS: {\n      return {\n        ...state,\n        [PINS.RAS]: state[PINS.RAS] === PIN_STATE.ON ? PIN_STATE.OFF : PIN_STATE.ON,\n        [PINS.CAS]: state[PINS.CAS] === PIN_STATE.ON ? PIN_STATE.OFF : PIN_STATE.ON,\n      };\n    }\n    case SET_TACTS:\n      return { ...state, tacts: payload.tacts, currentTacts: payload };\n\n    case SET_CURRENT_TACTS:\n      return { ...state, currentTacts: payload };\n\n    case SET_PINS_WIDTH: {\n      const { type, width } = payload;\n      const updatedValue = state[type].padStart(width, \"0\").slice(-width);\n      const update = { [type]: updatedValue, [`${type}Width`]: width };\n      if (type === \"address\") {\n        update.row = slice(0, updatedValue.length / 2, updatedValue);\n        update.col = slice(updatedValue.length / 2, updatedValue.length, updatedValue);\n      }\n      return { ...state, ...update };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default pinsInfo;\n\nexport const selectData = (state) => path([\"pinsInfo\", \"data\"], state);\nexport const selectDataWidth = (state) => path([\"pinsInfo\", \"dataWidth\"], state);\nexport const selectAddressWidth = (state) => path([\"pinsInfo\", \"addressWidth\"], state);\nexport const selectEnabled = (state) => path([\"pinsInfo\", \"enabled\"], state);\nexport const selectMemoryMode = (state) => path([\"pinsInfo\", \"readWrite\"], state);\nexport const selectClock = (state) => path([\"pinsInfo\", \"clock\"], state);\nexport const selectTacts = (state) => path([\"pinsInfo\", \"tacts\"], state);\nexport const selectCurrentTacts = (state) => path([\"pinsInfo\", \"currentTacts\"], state);\n\nexport const selectRas = (state) => path([\"pinsInfo\", PINS.RAS], state);\nexport const selectCas = (state) => path([\"pinsInfo\", PINS.CAS], state);\n\nexport const selectAddressRowPins = (state) => {\n  return path([\"pinsInfo\", \"row\"], state);\n};\n\nexport const selectAddressColPins = (state) => {\n  return path([\"pinsInfo\", \"col\"], state);\n};\n\nexport const selectAddressPins = (state) => {\n  const addressRow = selectAddressRowPins(state);\n  const addressColumn = selectAddressColPins(state);\n  return `${addressRow}${addressColumn}`;\n};\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useMemo } from \"react\";\n\nexport const useAction = (actionFn) => {\n  const dispatch = useDispatch();\n  const memedAct = useMemo(() => actionFn, [actionFn]);\n  return useCallback(\n    function callback() {\n      dispatch(memedAct.apply(null, arguments));\n    },\n    [dispatch, memedAct]\n  );\n};\n","import {\n  SET_IS_PIN_NOTATION_CLASSICAL,\n  SET_IS_TACTING_ENABLED,\n  SET_MEMORY_DISPLAY_TYPE,\n  SET_IS_RAS_CAS_ENABLED,\n} from \"../actions\";\nimport { path } from \"ramda\";\n\nconst initialState = {\n  isPinsNotationClassical: false,\n  isTactingEnabled: false,\n  isRasCasEnabled: false,\n  memoryDisplayType: \"matrix\",\n};\n\nconst visualizationSettings = (state = initialState, action) => {\n  const { payload, type } = action;\n  switch (type) {\n    case SET_IS_PIN_NOTATION_CLASSICAL:\n      return {\n        ...state,\n        isPinsNotationClassical: payload.isClassical,\n      };\n    case SET_IS_TACTING_ENABLED:\n      return {\n        ...state,\n        isTactingEnabled: payload.isEnabled,\n        isRasCasEnabled: payload.isEnabled ? state.isRasCasEnabled : false,\n      };\n    case SET_IS_RAS_CAS_ENABLED:\n      return {\n        ...state,\n        isRasCasEnabled: payload.isEnabled,\n      };\n    case SET_MEMORY_DISPLAY_TYPE:\n      return {\n        ...state,\n        memoryDisplayType: payload.displayType,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default visualizationSettings;\n\nexport const selectIsPinNotationClassical = (state) =>\n  path([\"visualizationSettings\", \"isPinsNotationClassical\"], state);\n\nexport const selectIsTactingEnabled = (state) => path([\"visualizationSettings\", \"isTactingEnabled\"], state);\n\nexport const selectMemoryDisplayType = (state) => path([\"visualizationSettings\", \"memoryDisplayType\"], state);\n\nexport const selectIsRasCasEnabled = (state) => path([\"visualizationSettings\", \"isRasCasEnabled\"], state);\n","import { useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { map } from \"ramda\";\n\nimport { selectMemoryDisplayType } from \"../redux/reducers/visualizationSettings.red\";\nimport { useAction } from \"./reactRedux.hks\";\nimport {\n  setMemory,\n  setPins,\n  setDatumInMemory,\n  setSelectedRowInMemory,\n  setSelectedColInMemory,\n  setClockPin,\n  readDatumFromMemory,\n} from \"../redux/actions\";\nimport {\n  selectAddressWidth,\n  selectDataWidth,\n  selectAddressPins,\n  selectData,\n  selectMemoryMode,\n  selectCurrentTacts,\n  selectClock,\n  selectAddressColPins,\n  selectAddressRowPins,\n  selectEnabled,\n  selectRas,\n} from \"../redux/reducers/pinsInfo.red\";\nimport { selectMemory, selectSelectedRow, selectSelectedColumn } from \"../redux/reducers/memory.red\";\nimport { MEMORY_MODE, MEMORY_STATE, PINS, PIN_STATE } from \"../helpers/consts\";\nimport { selectIsRasCasEnabled } from \"../redux/reducers/visualizationSettings.red\";\n\n// This hook determines cell row and column order in matrix view\nexport const useCellOrder = () => {\n  const addressLength = useSelector(selectAddressWidth);\n  const getCellOrder = (cellIndex) => ({\n    column: cellIndex % Math.pow(2, Math.floor(addressLength / 2)),\n    row: Math.floor(cellIndex / Math.pow(2, Math.floor(addressLength / 2))),\n  });\n\n  const totalColumns = Math.pow(2, Math.floor(addressLength / 2));\n  const totalRows = Math.floor(Math.pow(2, addressLength) / Math.pow(2, Math.floor(addressLength / 2)));\n  return [getCellOrder, { totalRows, totalColumns }];\n};\n\n// This hook encapsulates the calculation of cell position in table / matrix view\nexport const useMemoryCSSMeasures = () => {\n  const displayType = useSelector(selectMemoryDisplayType);\n  const addressLength = useSelector(selectAddressWidth);\n  const dataLength = useSelector(selectDataWidth);\n\n  const [getCellOrder] = useCellOrder();\n\n  // vertical offset is needed to leave some place for header\n  const verticalOffset = 22;\n  const cellWidth = displayType === \"table\" ? 100 : 70;\n  const cellMargin = 2;\n  const cellHeight = displayType === \"table\" ? 20 : 33;\n\n  const containerWidth =\n    displayType === \"table\"\n      ? cellWidth * 2 + cellMargin\n      : (cellWidth + cellMargin) * Math.pow(2, Math.floor(addressLength / 2));\n  const containerHeight =\n    displayType === \"table\"\n      ? Math.pow(2, addressLength) * (cellHeight + cellMargin) + verticalOffset\n      : Math.pow(2, Math.ceil(addressLength / 2)) * (cellHeight + cellMargin);\n\n  const getCellPosition = (cellIndex) => {\n    if (displayType === \"table\") {\n      const cellY = verticalOffset + cellIndex * (cellHeight + cellMargin);\n      return {\n        cellX: cellWidth + cellMargin,\n        cellY,\n        textX: 2 * cellWidth,\n        textY: cellY + (cellHeight + cellMargin) / 2,\n      };\n    }\n    const { row, column } = getCellOrder(cellIndex);\n    return {\n      cellX: column * (cellWidth + cellMargin),\n      cellY: row * (cellHeight + cellMargin),\n      textX: column * (cellWidth + cellMargin) + cellWidth - cellMargin * 2,\n      textY: row * (cellHeight + cellMargin) + (cellHeight + cellMargin) / 2,\n    };\n  };\n\n  const getRowPosition = (rowIndex) => ({ x: 0, y: rowIndex * (cellHeight + cellMargin) });\n  const getColPosition = (colIndex) => ({ x: colIndex * (cellWidth + cellMargin), y: 0 });\n  const widthForChar = cellWidth / dataLength;\n  const MIN_FONT_SIZE = 13;\n  const MAX_FONT_SIZE = 20;\n\n  return [\n    getCellPosition,\n    getColPosition,\n    getRowPosition,\n    {\n      cellWidth,\n      cellHeight,\n      cellMargin,\n      verticalOffset,\n      containerWidth,\n      containerHeight,\n      fontSize:\n        widthForChar > MAX_FONT_SIZE\n          ? MAX_FONT_SIZE\n          : widthForChar < MIN_FONT_SIZE\n          ? MIN_FONT_SIZE\n          : cellWidth / dataLength,\n    },\n    { rowWidth: containerWidth - cellMargin, rowHeight: cellHeight },\n    { colWidth: cellWidth, colHeight: containerHeight - cellMargin },\n  ];\n};\n\n// This hook controlls memory datum width\n// Add adds zeros from the left to the datum, in case data width was increased\nexport const useControlMemoryDatumWidth = () => {\n  const setMemoryAct = useAction(setMemory);\n  const dataWidth = useSelector(selectDataWidth);\n  const memorizedInfo = useSelector(selectMemory);\n\n  useEffect(() => {\n    compose(\n      setMemoryAct,\n      map((cell) => ({\n        ...cell,\n        datum: cell.datum.padStart(dataWidth, PIN_STATE.OFF).slice(-dataWidth),\n      }))\n    )(memorizedInfo);\n  }, [dataWidth, setMemoryAct]);\n};\n\nexport const useTacting = () => {\n  // const setCurrentTactsAct = useAction(setCurrentTacts);\n  const setClockPinAct = useAction(setClockPin);\n  const clock = useSelector(selectClock);\n  const currentTacts = useSelector(selectCurrentTacts);\n\n  // reset clock pin to 0 state after a small timeout\n  const resetClockTimeout = useRef(null);\n  useEffect(() => {\n    if (clock === PIN_STATE.ON) {\n      resetClockTimeout.current = setTimeout(() => {\n        setClockPinAct(PIN_STATE.OFF);\n      }, 500);\n    }\n    return () => clearTimeout(resetClockTimeout.current);\n  }, [clock, currentTacts, setClockPinAct]);\n\n  const handleSetClock = () => {\n    if (currentTacts > 0) {\n      setClockPinAct(PIN_STATE.ON);\n    }\n  };\n\n  return [handleSetClock];\n};\n\nexport const useReadWriteMemoryDatum = () => {\n  const setPinsAct = useAction(setPins);\n  const setSelectedRowInMemoryAct = useAction(setSelectedRowInMemory);\n  const setSelectedColInMemoryAct = useAction(setSelectedColInMemory);\n  const readDatumFromMemoryAct = useAction(readDatumFromMemory);\n\n  const memorizedInfo = useSelector(selectMemory);\n  const setDatumInMemoryAct = useAction(setDatumInMemory);\n  const address = useSelector(selectAddressPins);\n  const rasAddr = useSelector(selectAddressRowPins);\n  const casAddr = useSelector(selectAddressColPins);\n  const dataWidth = useSelector(selectDataWidth);\n  const datum = useSelector(selectData);\n  const memoryMode = useSelector(selectMemoryMode);\n  const isEnabled = useSelector(selectEnabled);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n  const currentTacts = useSelector(selectCurrentTacts);\n  const selectedRow = useSelector(selectSelectedRow);\n  const selectedCol = useSelector(selectSelectedColumn);\n  const isRas = useSelector(selectRas) === PIN_STATE.ON;\n\n  const setDatum = (datum) => setPinsAct(PINS.DATA, datum);\n\n  // if memory state has been changed between read and write, reset the data\n  useEffect(() => {\n    if (memoryMode && currentTacts !== 0) {\n      setDatum(PIN_STATE.OFF.repeat(dataWidth));\n    }\n  }, [memoryMode]);\n\n  // update datum in memory if address is already selected\n  useEffect(() => {\n    if (\n      selectedRow &&\n      selectedCol &&\n      isEnabled === MEMORY_STATE.ENABLED &&\n      memoryMode === MEMORY_MODE.WRITE &&\n      currentTacts === 0\n    ) {\n      setDatumInMemoryAct(datum, `${selectedRow}${selectedCol}`);\n    }\n  }, [currentTacts, selectedCol, selectedRow, datum, isEnabled, setDatumInMemoryAct]);\n\n  // read datum from memory if address is already selected\n  useEffect(() => {\n    if (selectedRow && selectedCol && memoryMode === MEMORY_MODE.READ && currentTacts === 0) {\n      readDatumFromMemoryAct(address);\n    }\n  }, [\n    currentTacts,\n    memoryMode,\n    memorizedInfo,\n    address,\n    selectedRow,\n    selectedCol,\n    datum,\n    isEnabled,\n    readDatumFromMemory,\n  ]);\n\n  useEffect(() => {\n    if (!currentTacts && (!isRasCasEnabled || !isRas) && casAddr) {\n      setSelectedColInMemoryAct(casAddr);\n    }\n    if (!currentTacts && (!isRasCasEnabled || isRas) && rasAddr) {\n      setSelectedRowInMemoryAct(rasAddr);\n    }\n  }, [isRasCasEnabled, isRas, casAddr, rasAddr, currentTacts, setSelectedRowInMemoryAct]);\n};\n","import React from \"react\";\nimport { map } from \"ramda\";\nimport BEM from \"../../helpers/BEM\";\n\nimport \"./ToggleButtons.scss\";\n\nconst b = BEM(\"ToggleButtons\");\n\nconst ToggleButtons = ({\n  options,\n  handleSelect = () => {\n    /* noop */\n  },\n  selectedValue,\n  containerClassName,\n}) => {\n  const onSelect = (value) => () => handleSelect(value);\n\n  return (\n    <div className={`${b()} ${containerClassName}`}>\n      {map(\n        ({ value, label }) => (\n          <button\n            key={value}\n            className={b(\"option\", [selectedValue === value && \"selected\"])}\n            onClick={onSelect(value)}\n          >\n            {label}\n          </button>\n        ),\n        options\n      )}\n    </div>\n  );\n};\n\nexport default ToggleButtons;\n","import React, { useMemo } from \"react\";\nimport BEM from \"../../helpers/BEM\";\n\nimport { useSelector } from \"react-redux\";\nimport { selectMemory, selectSelectedColumn, selectSelectedRow } from \"../../redux/reducers/memory.red\";\nimport { selectAddressRowPins, selectAddressColPins, selectAddressWidth } from \"../../redux/reducers/pinsInfo.red\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setMemoryDisplayType } from \"../../redux/actions\";\nimport { selectIsRasCasEnabled, selectMemoryDisplayType } from \"../../redux/reducers/visualizationSettings.red\";\nimport { useCellOrder, useMemoryCSSMeasures } from \"../../hooks/memoryView.hks\";\nimport ToggleButtons from \"../ToggleButtons\";\nimport { VIEW_OPTIONS } from \"../../helpers/consts\";\n\nimport \"./Memory.scss\";\n\nconst b = BEM(\"Memory\");\n\nconst Memory = () => {\n  const setMemoryDisplayTypeAct = useAction(setMemoryDisplayType);\n\n  const memorizedInfo = useSelector(selectMemory);\n  const displayType = useSelector(selectMemoryDisplayType);\n  const preselectedCol = useSelector(selectAddressColPins);\n  const selectedColumn = useSelector(selectSelectedColumn);\n  const preselectedRow = useSelector(selectAddressRowPins);\n  const selectedRow = useSelector(selectSelectedRow);\n  const addressWidth = useSelector(selectAddressWidth);\n  const memoryDisplayType = useSelector(selectMemoryDisplayType);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n  const preselectedAddress = `${preselectedRow}${preselectedCol}`;\n  const selectedAddress = `${selectedRow}${selectedColumn}`;\n  const isFullAddressSelected = useMemo(() => selectedAddress.length === addressWidth, [addressWidth, selectedAddress]);\n\n  const [\n    getCellCoordinates,\n    getColCoordinates,\n    getRowCoordinates,\n    { cellWidth, cellHeight, cellMargin, verticalOffset: headerHeight, containerWidth, containerHeight, fontSize },\n    { rowWidth, rowHeight },\n    { colWidth, colHeight },\n  ] = useMemoryCSSMeasures();\n\n  const [, { totalRows, totalColumns }] = useCellOrder();\n\n  const renderColumnHeader = (text, x, y) => (\n    <text className={b(\"header\")} x={x} y={y}>\n      {text}\n    </text>\n  );\n\n  const renderRowFrame = () =>\n    new Array(totalRows).fill(\"\").map((r, index) => {\n      const { x, y } = getRowCoordinates(index);\n      const isShowSelected = isRasCasEnabled ? selectedRow === preselectedRow : selectedAddress === preselectedAddress;\n      const isSelected = displayType === \"matrix\" && index === parseInt(selectedRow, 2);\n      const isPreselected = displayType === \"matrix\" && index === parseInt(preselectedRow, 2);\n      console.log(\"=====> is preselected\", { preselectedRow, preselectedCol, isPreselected });\n      return (\n        <rect\n          key={`${x}-${y}`}\n          transform=\"translate(1 1)\"\n          x={x}\n          y={y}\n          width={rowWidth - 2}\n          height={rowHeight - 2}\n          className={b(\"row\", [(isShowSelected && isSelected && \"selected\") || (isPreselected && \"preselected\")])}\n        />\n      );\n    });\n\n  const renderColFrame = () =>\n    new Array(totalColumns).fill(\"\").map((r, index) => {\n      const { x, y } = getColCoordinates(index);\n\n      const isShowSelected = isRasCasEnabled\n        ? selectedColumn === preselectedCol\n        : selectedAddress === preselectedAddress;\n\n      const isSelected = displayType === \"matrix\" && index === parseInt(selectedColumn, 2);\n      const isPreselected = displayType === \"matrix\" && index === parseInt(preselectedCol, 2);\n\n      return (\n        <rect\n          key={`${x}-${y}`}\n          transform=\"translate(1 1)\"\n          y={y}\n          x={x}\n          width={colWidth - 2}\n          height={colHeight - 2}\n          className={b(\"column\", [(isShowSelected && isSelected && \"selected\") || (isPreselected && \"preselected\")])}\n        />\n      );\n    });\n\n  const renderMemoryView = () =>\n    memorizedInfo.map((cell, cellIndex) => {\n      const { cellX, cellY, textX, textY } = getCellCoordinates(cellIndex);\n\n      const preselectedAddressStyles = parseInt(preselectedAddress, 2) === cellIndex ? \"preselected\" : \"\";\n      const selectedAddressStyles =\n        selectedAddress === preselectedAddress && parseInt(selectedAddress, 2) === cellIndex && isFullAddressSelected\n          ? \"selected\"\n          : \"\";\n      const dirtyAddressStyles = cell.isDirty ? \"dirty\" : \"\";\n\n      return (\n        <g key={cellIndex}>\n          {displayType === \"table\" && (\n            <g>\n              <rect\n                x={0}\n                y={cellY}\n                width={cellWidth}\n                height={cellHeight}\n                className={b(\"cellAddress\", [selectedAddressStyles || preselectedAddressStyles, dirtyAddressStyles])}\n              ></rect>\n              <text className={b(\"addressLabel\")} x={cellX - cellMargin} y={cellY + (cellHeight + cellMargin) / 2}>\n                {cellIndex}\n              </text>\n            </g>\n          )}\n          <g id={cellIndex}>\n            <rect\n              x={cellX}\n              y={cellY}\n              width={cellWidth}\n              height={cellHeight}\n              className={b(\"cell\", [selectedAddressStyles || preselectedAddressStyles, dirtyAddressStyles])}\n            />\n            <text className={b(\"dataLabel\")} x={textX} y={textY} fontSize={`${fontSize}px`}>\n              {cell.datum}\n            </text>\n          </g>\n        </g>\n      );\n    });\n\n  return (\n    <div className={b()}>\n      <ToggleButtons\n        containerClassName={b(\"viewOptions\")}\n        options={VIEW_OPTIONS}\n        selectedValue={memoryDisplayType}\n        handleSelect={setMemoryDisplayTypeAct}\n      />\n      <div className={b(\"memoryContainer\")}>\n        <svg style={{ minHeight: containerHeight, width: containerWidth }}>\n          <g>\n            {displayType === \"table\" && (\n              <g>\n                {renderColumnHeader(\"Address\", cellWidth - cellMargin, headerHeight / 2)}\n                {renderColumnHeader(\"Data\", cellWidth * 2, headerHeight / 2)}\n              </g>\n            )}\n            <g>\n              {renderMemoryView()}\n              {renderRowFrame()}\n              {renderColFrame()}\n            </g>\n          </g>\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nexport default Memory;\n","import React from \"react\";\n\nimport BEM from \"../../../helpers/BEM\";\nimport {\n  PIN_STATE,\n  PIN_HEIGHT,\n  PIN_LABEL_MARGIN,\n  SIGNIFICANCE_TEXT_WIDTH,\n  DEFAULT_PIN_WIDTH,\n} from \"../../../helpers/consts\";\n\nimport \"./Pin.scss\";\n\nconst b = BEM(\"Pin\");\n\nconst Pin = ({\n  id,\n  pinState,\n  pinWidth,\n  handleDataPinClick,\n  isDisabled,\n  isNotationClassical,\n  isOneOfMany,\n  significance /* = 'MSB' | 'LSB' | undefined */,\n}) => {\n  return (\n    <g key={id} onClick={handleDataPinClick(id)}>\n      {significance && (\n        <text\n          x={-SIGNIFICANCE_TEXT_WIDTH}\n          y={id * PIN_HEIGHT + PIN_HEIGHT - PIN_LABEL_MARGIN}\n          className={b(\"pinSignificance\")}\n        >\n          {significance}\n        </text>\n      )}\n      <text\n        x={0}\n        y={id * PIN_HEIGHT + PIN_HEIGHT - PIN_LABEL_MARGIN}\n        className={b(\"pinLabel\", [pinState === PIN_STATE.ON && \"selected\", isDisabled && \"disabled\"])}\n      >\n        {pinState}\n      </text>\n      <rect\n        x={0}\n        y={id * PIN_HEIGHT}\n        height={PIN_HEIGHT}\n        width={pinWidth}\n        className={b(\"pinArea\", [isDisabled && \"disabled\"])}\n      />\n      <line\n        x1={0}\n        y1={id * PIN_HEIGHT + PIN_HEIGHT}\n        x2={DEFAULT_PIN_WIDTH}\n        y2={id * PIN_HEIGHT + PIN_HEIGHT}\n        className={b(\"pinLine\", [isNotationClassical && isOneOfMany ? \"short\" : \"long\"])}\n      />\n    </g>\n  );\n};\n\nexport default Pin;\n","import React, { useMemo } from \"react\";\n\nimport BEM from \"../../../helpers/BEM\";\nimport { DEFAULT_PIN_WIDTH, PIN_HEIGHT, PIN_LABEL_MARGIN } from \"../../../helpers/consts\";\nimport { usePrevious } from \"../../../hooks\";\n\nimport \"./CrossPinsNotation.scss\";\n\nconst b = BEM(\"CrossPinsNotation\");\n\nconst CrossPinsNotation = ({ pinWidth, isNotationClassical, numberOfPins }) => {\n  const crossedNotationYPosition = useMemo(() => (numberOfPins * PIN_HEIGHT) / 2 + PIN_HEIGHT / 2, [numberOfPins]);\n\n  const previousIsNotationClassical = usePrevious(isNotationClassical);\n\n  return (\n    <>\n      <line\n        x1={pinWidth}\n        y1={PIN_HEIGHT}\n        x2={pinWidth}\n        y2={numberOfPins * PIN_HEIGHT}\n        className={b(\"pinsDivider\", [isNotationClassical ? \"visible\" : \"invisible\"])}\n      />\n      <text\n        x={45}\n        y={crossedNotationYPosition - PIN_LABEL_MARGIN}\n        className={b(\"pinsNumber\", [isNotationClassical ? \"visible\" : \"invisible\"])}\n      >\n        {numberOfPins}\n      </text>\n      <line\n        x1={isNotationClassical ? 50 : DEFAULT_PIN_WIDTH}\n        y1={crossedNotationYPosition}\n        x2={isNotationClassical ? 70 : DEFAULT_PIN_WIDTH}\n        y2={crossedNotationYPosition}\n        className={b(\"crossNotation\", [isNotationClassical ? \"visible\" : \"invisible\"])}\n      />\n      {numberOfPins > 1 && (\n        <line\n          x1={pinWidth}\n          y1={crossedNotationYPosition}\n          x2={DEFAULT_PIN_WIDTH}\n          y2={crossedNotationYPosition}\n          className={b(\"pinsNotation\", [\n            isNotationClassical &&\n              (previousIsNotationClassical === null || previousIsNotationClassical === isNotationClassical\n                ? \"visible\"\n                : \"visibleAnimated\"),\n            !isNotationClassical && \"invisible\",\n          ])}\n        />\n      )}\n    </>\n  );\n};\n\nexport default CrossPinsNotation;\n","import { useEffect, useRef } from \"react\";\n\nexport const useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n\nexport const usePrevious = (value, initialValue = null) => {\n  const prev = useRef(initialValue);\n  useEffect(() => {\n    prev.current = value;\n  });\n  return prev.current;\n};\n","import React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { update, includes } from \"ramda\";\nimport { useSelector } from \"react-redux\";\n\nimport BEM from \"../../helpers/BEM\";\nimport { selectIsPinNotationClassical } from \"../../redux/reducers/visualizationSettings.red\";\nimport { PIN_STATE, DEFAULT_PIN_WIDTH, SIGNIFICANCE_TEXT_WIDTH, PIN_HEIGHT } from \"../../helpers/consts\";\n\nimport Pin from \"./Pin\";\nimport CrossPinsNotation from \"./CrossPinsNotation\";\n\nimport \"./PinsBlock.scss\";\n\nconst b = BEM(\"PinsBlock\");\n\nconst PinsBlock = ({ binaryData, setBinaryData, isDisabled = false }) => {\n  const [binaryDataArray, setBinaryDataArray] = useState(`${binaryData}`.split(\"\"));\n  const numberOfPins = binaryDataArray.length;\n  const isNotationClassical = useSelector(selectIsPinNotationClassical);\n  const pinWidth = useMemo(() => (isNotationClassical ? 25 : DEFAULT_PIN_WIDTH), [isNotationClassical]);\n  const viewBoxWidth = useMemo(() => DEFAULT_PIN_WIDTH + SIGNIFICANCE_TEXT_WIDTH, []);\n  const getIsFirstOrLastPin = useCallback((id) => includes(id, [0, binaryDataArray.length - 1]), [binaryDataArray]);\n\n  useEffect(() => {\n    if (binaryData) setBinaryDataArray(`${binaryData}`.split(\"\"));\n  }, [binaryData, setBinaryDataArray]);\n\n  const handleDataPinClick = useCallback(\n    (pinIndex) => () => {\n      if (isDisabled) return;\n      if (setBinaryData) {\n        const updatedPinValue = Number(binaryDataArray[pinIndex]) === 0 ? PIN_STATE.ON : PIN_STATE.OFF;\n        const updatedDataArray = update(pinIndex, updatedPinValue, binaryDataArray);\n        setBinaryDataArray(updatedDataArray);\n        setBinaryData(updatedDataArray.join(\"\"));\n      }\n    },\n    [binaryDataArray, isDisabled, setBinaryData]\n  );\n\n  const renderPin = useCallback(\n    (pin, id) => {\n      const significance = getIsFirstOrLastPin(id) && (id === 0 ? \"MSB\" : \"LSB\");\n      return (\n        <Pin\n          key={id}\n          id={id}\n          pinState={pin}\n          pinWidth={pinWidth}\n          defaultPinWidth={DEFAULT_PIN_WIDTH}\n          isOneOfMany={numberOfPins > 1}\n          isNotationClassical={isNotationClassical}\n          significance={numberOfPins > 1 && significance}\n          handleDataPinClick={handleDataPinClick}\n          isDisabled={isDisabled}\n        />\n      );\n    },\n    [isDisabled, numberOfPins, getIsFirstOrLastPin, handleDataPinClick, isNotationClassical, pinWidth]\n  );\n\n  return (\n    <div className={b()}>\n      <svg\n        className={b(\"list\")}\n        width={viewBoxWidth}\n        height={(numberOfPins + 1) * PIN_HEIGHT}\n        viewBox={`-${SIGNIFICANCE_TEXT_WIDTH} 0 ${viewBoxWidth} ${(binaryDataArray.length + 1) * PIN_HEIGHT}`}\n      >\n        {binaryDataArray.map(renderPin)}\n        <CrossPinsNotation pinWidth={pinWidth} isNotationClassical={isNotationClassical} numberOfPins={numberOfPins} />\n      </svg>\n    </div>\n  );\n};\n\nexport default PinsBlock;\n","import React from \"react\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setPinsTypeWidth, setPins } from \"../../redux/actions\";\nimport { useSelector } from \"react-redux\";\nimport { selectData, selectDataWidth, selectMemoryMode } from \"../../redux/reducers/pinsInfo.red\";\nimport { MEMORY_MODE, PINS } from \"../../helpers/consts\";\nimport BEM from \"../../helpers/BEM\";\nimport Pins from \"../PinsBlock\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst DataControls = () => {\n  const memoryMode = useSelector(selectMemoryMode);\n  const datum = useSelector(selectData);\n\n  const setPinsAct = useAction(setPins);\n  const setPinsWidthAct = useAction(setPinsTypeWidth);\n\n  const setDataLength = (width) => setPinsWidthAct(PINS.DATA, width);\n  const setDatum = (datum) => setPinsAct(PINS.DATA, datum);\n\n  const dataLength = useSelector(selectDataWidth);\n\n  const handleInputDataLength = (ev) => setDataLength(+ev.target.value);\n\n  return (\n    <div className={b(\"dataBlock\")}>\n      <label className={b(\"dataLabel\")}>\n        <div className={b(\"dataMode\")}>\n          <span className={b(\"dataModeLabel\")}>{memoryMode === MEMORY_MODE.WRITE ? \"Input: \" : \"Output: \"}</span>\n          <span>{datum}</span>\n        </div>\n        <div>Decimal: {parseInt(datum, 2)}</div>\n        <div className={b(\"bitsWidth\")}>width: {dataLength} bits</div>\n        <input\n          name=\"dataLength\"\n          type=\"range\"\n          min={1}\n          max={8}\n          defaultValue={dataLength}\n          onInput={handleInputDataLength}\n        />\n      </label>\n      <Pins binaryData={datum} setBinaryData={setDatum} isDisabled={memoryMode === MEMORY_MODE.READ} />\n    </div>\n  );\n};\n\nexport default DataControls;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { slice } from \"ramda\";\n\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setPinsTypeWidth, setAddressRowPins, setAddressColPins } from \"../../redux/actions\";\nimport {\n  selectAddressWidth,\n  selectRas,\n  selectCas,\n  selectAddressColPins,\n  selectAddressRowPins,\n} from \"../../redux/reducers/pinsInfo.red\";\nimport Pins from \"../PinsBlock\";\nimport { selectIsRasCasEnabled } from \"../../redux/reducers/visualizationSettings.red\";\nimport { PINS, PIN_STATE } from \"../../helpers/consts\";\n\nimport BEM from \"../../helpers/BEM\";\n\nconst b = BEM(\"MemoryControls\");\n\nexport const AddressControls = () => {\n  const addressRow = useSelector(selectAddressRowPins);\n  const addressColumn = useSelector(selectAddressColPins);\n\n  const addressLength = useSelector(selectAddressWidth);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n  const ras = useSelector(selectRas);\n  const cas = useSelector(selectCas);\n\n  const setAddressRowPinsAct = useAction(setAddressRowPins);\n  const setAddressColPinsAct = useAction(setAddressColPins);\n  const setPinsWidthAct = useAction(setPinsTypeWidth);\n\n  const setAddressLength = (width) => setPinsWidthAct(PINS.ADDRESS, width);\n\n  const handleInputAddressLength = ({ target }) => setAddressLength(+target.value);\n\n  const handleSetAddress = (value) => {\n    setAddressRowPinsAct(slice(0, value.length / 2, value));\n    setAddressColPinsAct(slice(value.length / 2, value.length, value));\n  };\n  const padLength = Math.max(addressLength - addressRow.length - addressColumn.length, 0);\n  const addressPins = `${\"0\".repeat(padLength)}${addressRow}${addressColumn}`;\n\n  return (\n    <div className={b(\"addressBlock\")}>\n      <label className={b(\"addressLabel\")}>\n        <div>Address: {addressPins}</div>\n        <div>Decimal: {parseInt(addressPins, 2)}</div>\n        <div className={b(\"bitsWidth\")}>width: {addressLength} bits</div>\n        <input\n          name=\"addressLength\"\n          type=\"range\"\n          min={2}\n          max={8}\n          step={2}\n          defaultValue={addressLength}\n          onInput={handleInputAddressLength}\n        />\n      </label>\n      <div className={b(\"addressPins\")}>\n        {!isRasCasEnabled && <Pins binaryData={addressPins} setBinaryData={handleSetAddress} />}\n        {isRasCasEnabled && (\n          <>\n            {Number(ras) ? <Pins binaryData={addressRow} setBinaryData={setAddressRowPinsAct} /> : null}\n            {Number(cas) ? <Pins binaryData={addressColumn} setBinaryData={setAddressColPinsAct} /> : null}\n            <div className={b(\"ras\")}>\n              <span className={b(\"rasLabel\", [ras === PIN_STATE.ON && \"active\"])}>ras</span>\n              <Pins binaryData={ras} isDisabled />\n            </div>\n            <div className={b(\"cas\")}>\n              <span className={b(\"casLabel\", [cas === PIN_STATE.ON && \"active\"])}>cas</span>\n              <Pins binaryData={cas} isDisabled />\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AddressControls;\n","import React from \"react\";\nimport Pins from \"../PinsBlock\";\nimport BEM from \"../../helpers/BEM\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setPins } from \"../../redux/actions\";\nimport { useSelector } from \"react-redux\";\nimport { selectMemoryMode, selectEnabled } from \"../../redux/reducers/pinsInfo.red\";\nimport { MEMORY_MODE, MEMORY_STATE, PINS } from \"../../helpers/consts\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst StateControls = () => {\n  const memoryMode = useSelector(selectMemoryMode);\n  const enabled = useSelector(selectEnabled);\n\n  const setPinsAct = useAction(setPins);\n\n  const setMemoryState = (readWrite) => setPinsAct(PINS.READ_WRITE, readWrite);\n  const setEnabled = () => {\n    setPinsAct(PINS.ENABLED, enabled === MEMORY_STATE.ENABLED ? MEMORY_STATE.DISABLED : MEMORY_STATE.ENABLED);\n  };\n\n  return (\n    <div>\n      <div className={b(\"enabledBlock\")}>\n        <label onClick={setEnabled} className={b(\"enabledLabel\", [enabled === MEMORY_STATE.ENABLED && \"enabled\"])}>\n          Enable\n        </label>\n        <Pins binaryData={enabled} setBinaryData={setEnabled} />\n      </div>\n      <div className={b(\"readWriteBlock\")}>\n        <label className={b(\"readWriteLabel\")}>\n          <span\n            className={b(\"read\", [memoryMode === MEMORY_MODE.READ && \"enabled\"])}\n            onClick={() => setMemoryState(MEMORY_MODE.READ)}\n          >\n            Read\n          </span>\n          /\n          <span\n            className={b(\"write\", [memoryMode === MEMORY_MODE.WRITE && \"enabled\"])}\n            onClick={() => setMemoryState(MEMORY_MODE.WRITE)}\n          >\n            Write\n          </span>\n        </label>\n        <Pins binaryData={memoryMode} setBinaryData={setMemoryState} />\n      </div>\n    </div>\n  );\n};\n\nexport default StateControls;\n","import React from \"react\";\nimport Pins from \"../PinsBlock\";\nimport BEM from \"../../helpers/BEM\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setTacts } from \"../../redux/actions\";\nimport { selectClock, selectCurrentTacts } from \"../../redux/reducers/pinsInfo.red\";\nimport { useSelector } from \"react-redux\";\nimport { selectTacts } from \"../../redux/reducers/pinsInfo.red\";\nimport { useTacting } from \"../../hooks/memoryView.hks\";\nimport { PIN_STATE } from \"../../helpers/consts\";\nimport { selectIsTactingEnabled } from \"../../redux/reducers/visualizationSettings.red\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst ClockControls = () => {\n  const isTactingEnabled = useSelector(selectIsTactingEnabled);\n\n  const clock = useSelector(selectClock);\n  const tacts = useSelector(selectTacts);\n  const currentTacts = useSelector(selectCurrentTacts);\n  const setTactsAct = useAction(setTacts);\n\n  const [handleClock] = useTacting();\n\n  return (\n    <div className={b(\"clockPinBlock\", [isTactingEnabled ? \"visible\" : \"hidden\"])}>\n      <label className={b(\"clockLabel\")}>\n        <div onClick={handleClock} className={b(\"clock\", [clock === PIN_STATE.ON && \"enabled\"])}>\n          Clock <span className={b(\"currentTacts\")}>({currentTacts} tacts left)</span>\n        </div>\n        <div className={b(\"tacts\")}>\n          <input\n            type=\"number\"\n            className={b(\"tactsNumber\")}\n            value={tacts}\n            onChange={(ev) => setTactsAct(ev.target.value)}\n          />{\" \"}\n          Tacts <span className={b(\"tactsNote\")}>determined by the hardware producer</span>\n        </div>\n      </label>\n      <Pins binaryData={clock} setBinaryData={handleClock} />\n    </div>\n  );\n};\n\nexport default ClockControls;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\n\nimport { useReadWriteMemoryDatum, useControlMemoryDatumWidth } from '../../hooks/memoryView.hks';\nimport DataControls from \"./DataControls\";\nimport AddressControls from \"./AddressControls\";\nimport BEM from \"../../helpers/BEM\";\nimport StateControls from \"./StateControls\";\nimport ClockControls from \"./ClockControls\";\nimport ToggleButtons from \"../ToggleButtons\";\n\nimport { setIsPinNotationClassical } from \"../../redux/actions\";\nimport { selectIsPinNotationClassical } from \"../../redux/reducers/visualizationSettings.red\";\n\nimport \"./MemoryControls.scss\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst pinNotationOptions = [\n  { value: false, label: \"Default\" },\n  { value: true, label: \"Classical\" },\n];\n\nconst MemoryControls = () => {\n  const setIsPinNotationClassicalAct = useAction(setIsPinNotationClassical);\n  const isPinNotationClassical = useSelector(selectIsPinNotationClassical);\n\n  useControlMemoryDatumWidth();\n  useReadWriteMemoryDatum();\n\n  return (\n    <span className={b()}>\n      <ToggleButtons\n        containerClassName={b(\"viewOptions\")}\n        options={pinNotationOptions}\n        selectedValue={isPinNotationClassical}\n        handleSelect={setIsPinNotationClassicalAct}\n      />\n      <DataControls />\n      <AddressControls />\n      <StateControls />\n      <ClockControls />\n    </span>\n  );\n};\n\nexport default MemoryControls;\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setIsTactingEnabled, setIsRasCasEnabled, setCurrentTacts } from \"../../redux/actions\";\nimport { selectIsTactingEnabled, selectIsRasCasEnabled } from \"../../redux/reducers/visualizationSettings.red\";\n\nimport BEM from \"../../helpers/BEM\";\nimport \"./VisualizationSettings.scss\";\n\nconst b = BEM(\"VisualizationSettings\");\n\nconst VisualizationSettings = () => {\n  const isTactingEnabled = useSelector(selectIsTactingEnabled);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n\n  const setIsTactingEnabledAct = useAction(setIsTactingEnabled);\n  const setCurrentTactsAct = useAction(setCurrentTacts);\n  const setIsRasCasEnabledAct = useAction(setIsRasCasEnabled);\n\n  useEffect(() => {\n    if (!isTactingEnabled) setCurrentTactsAct(0);\n  }, [isTactingEnabled, setCurrentTactsAct]);\n\n  return (\n    <div className={b()}>\n      <label className={b(\"tacting\")}>\n        <input\n          className={b(\"tactingInput\")}\n          type=\"checkbox\"\n          checked={isTactingEnabled}\n          onChange={() => setIsTactingEnabledAct(!isTactingEnabled)}\n        />\n        Tacting\n      </label>\n      <label className={b(\"rasCas\")}>\n        <input\n          className={b(\"rasCasInput\")}\n          type=\"checkbox\"\n          checked={isRasCasEnabled}\n          onChange={() => setIsRasCasEnabledAct(!isRasCasEnabled)}\n        />\n        RAS / CAS\n      </label>\n    </div>\n  );\n};\n\nexport default VisualizationSettings;\n","import React from \"react\";\nimport Memory from \"../Memory\";\nimport BEM from \"../../helpers/BEM\";\n\nimport \"./RamVisualization.scss\";\nimport MemoryControls from \"../MemoryControls\";\nimport VisualizationSettings from \"../VisualizationSettings\";\n\nconst b = BEM(\"RamVisualization\");\n\nfunction RamVisualization() {\n  return (\n    <div className={b()}>\n      <div className={b(\"caption\")}>\n        <h1 className={b(\"header\")}>RAM Visualization</h1>\n        <VisualizationSettings />\n      </div>\n      <div className={b(\"visualization\")}>\n        <div className={b(\"pins\")}>\n          <MemoryControls />\n        </div>\n        <div className={b(\"memory\")}>\n          <Memory />\n        </div>\n      </div>\n      <div className={b(\"notes\")}>\n        <div>＊ LSB - Least Significant Bit (right-most bit)</div>\n        <div>＊ MSB - Most Significant Bit (left-most bit)</div>\n      </div>\n    </div>\n  );\n}\n\nexport default RamVisualization;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport pinsInfo from \"./pinsInfo.red\";\nimport memory from \"./memory.red\";\nimport visualizationSettings from \"./visualizationSettings.red\";\n\nexport default combineReducers({ memory, pinsInfo, visualizationSettings });\n","import { takeEvery, put, all, select, call } from \"redux-saga/effects\";\nimport { compose } from \"ramda\";\n\nimport {\n  setSelectedRowInMemory,\n  setSelectedColInMemory,\n  setIsTactingEnabled,\n  SET_IS_RAS_CAS_ENABLED,\n  setPins,\n  toggleRasCas,\n  setCurrentTacts,\n  SET_CLOCK_PIN,\n  SET_IS_TACTING_ENABLED,\n  WRITE_DATUM_IN_MEMORY,\n  SET_PINS_WIDTH,\n  setMemory,\n  READ_DATUM_FROM_MEMORY,\n} from \"../actions\";\nimport { MEMORY_STATE, PINS, PIN_STATE } from \"../../helpers/consts\";\nimport { selectIsRasCasEnabled, selectIsTactingEnabled } from \"../reducers/visualizationSettings.red\";\nimport {\n  selectTacts,\n  selectCurrentTacts,\n  selectAddressWidth,\n  selectDataWidth,\n  selectEnabled,\n} from \"../reducers/pinsInfo.red\";\nimport { selectMemory } from \"../reducers/memory.red\";\n\nconst delay = (time) => new Promise((resolve) => setTimeout(resolve, time));\n\nfunction* onReadDatumFromMemory(action) {\n  const {\n    payload: { address },\n  } = action;\n  const memory = yield select(selectMemory);\n  const dataWidth = yield select(selectDataWidth);\n  const isEnabled = yield select(selectEnabled);\n\n  if (isEnabled === MEMORY_STATE.ENABLED) yield put(setPins(PINS.DATA, memory[parseInt(address, 2)].datum));\n  else put(setPins(PINS.DATA, PIN_STATE.OFF.repeat(dataWidth)));\n}\n\nfunction* resetAddressRowAndCol() {\n  // If tacting is NOT enabled, we can write the data into the column right away.\n  // This means, we do not need to erase the selected columns.\n  // Otherwise, we need to erase selected rows and columns, because selection should happen\n  // only after a predefined number of tacts.\n  const isTactingEnabled = yield select(selectIsTactingEnabled);\n\n  if (isTactingEnabled) {\n    yield call(delay, 1000);\n    yield put(setSelectedRowInMemory(undefined));\n    yield put(setSelectedColInMemory(undefined));\n    console.log(\"this happened!\");\n  }\n}\n\nfunction* onWidthChange() {\n  const addressWidth = yield select(selectAddressWidth);\n  const dataWidth = yield select(selectDataWidth);\n  const memorizedInfo = yield select(selectMemory);\n\n  if (addressWidth) {\n    const updatedMemory = compose(\n      (memory) => memory.map((memoryCell, index) => memorizedInfo[index] || memoryCell),\n      (memory) =>\n        memory.fill({\n          isDirty: false,\n          datum: PIN_STATE.OFF.repeat(dataWidth),\n        })\n    )(new Array(Math.pow(2, addressWidth)));\n    yield put(setMemory(updatedMemory));\n  }\n}\n\nfunction* enableRasCasPins(action) {\n  if (action.payload.isEnabled) {\n    yield put(setPins(PINS.RAS, PIN_STATE.ON));\n    yield put(setIsTactingEnabled(true));\n  }\n}\n\nfunction* onSetTacting(action) {\n  if (action.payload.isEnabled) {\n    const ramLatency = yield select(selectTacts);\n    yield put(setCurrentTacts(ramLatency));\n  }\n  // If tacting is NOT enabled, we can write the data into the column right away.\n  // This means, we do not need to erase the selected columns.\n  // Otherwise, we need to erase selected rows and columns, because selection should happen\n  // only after a predefined number of tacts.\n  yield put(setSelectedRowInMemory(undefined));\n  yield put(setSelectedColInMemory(undefined));\n}\n\nfunction* updateNumberOfTacts(action) {\n  const currentTacts = yield select(selectCurrentTacts);\n  const clock = action.payload;\n  const isRasCasEnabled = yield select(selectIsRasCasEnabled);\n  const ramLatency = yield select(selectTacts);\n  if (clock === PIN_STATE.ON) {\n    yield put(setCurrentTacts(currentTacts - 1));\n  }\n  if (currentTacts === 0 && clock === PIN_STATE.OFF) {\n    // Reset current tacts to ramLatency, defined by hardware producer\n    yield put(setCurrentTacts(ramLatency));\n    if (isRasCasEnabled) {\n      // Change RAS to CAS and vice versa in case RAS/CAS is enabled and current tacts reached 0\n      yield put(toggleRasCas());\n    }\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeEvery([WRITE_DATUM_IN_MEMORY, READ_DATUM_FROM_MEMORY], resetAddressRowAndCol),\n    takeEvery(READ_DATUM_FROM_MEMORY, onReadDatumFromMemory),\n    takeEvery(SET_IS_RAS_CAS_ENABLED, enableRasCasPins),\n    takeEvery(SET_IS_TACTING_ENABLED, onSetTacting),\n    takeEvery(SET_CLOCK_PIN, updateNumberOfTacts),\n    takeEvery(SET_PINS_WIDTH, onWidthChange),\n  ]);\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducers from \"./redux/reducers\";\nimport sagas from \"./redux/sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = composeWithDevTools({});\n\nconst configureStore = () => {\n  const store = createStore(reducers, composeEnhancers(applyMiddleware(sagaMiddleware)));\n  sagaMiddleware.run(sagas);\n  return store;\n};\n\nexport default configureStore();\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport RamVisualization from \"./components/RamVisualization\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./commonStyles/index.scss\";\n\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <RamVisualization />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}