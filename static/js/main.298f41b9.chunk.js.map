{"version":3,"sources":["helpers/BEM.js","redux/actions/index.js","redux/reducers/memory.red.js","helpers/consts.js","redux/reducers/pinsInfo.red.js","redux/reducers/visualizationSettings.red.js","hooks/reactRedux.hks.js","hooks/index.js","components/Memory/Memory.js","hooks/htmlElements.hks.js","components/PinsBlock/PinsBlock.js","components/MemoryControls/DataControls.js","components/MemoryControls/AddressControls.js","components/MemoryControls/StateControls.js","components/MemoryControls/ClockControls.js","components/MemoryControls/MemoryControls.js","components/VisualizationSettings/VisualizationSettings.js","components/RamVisualization/RamVisualization.js","serviceWorker.js","redux/reducers/index.js","store.js","index.js"],"names":["getBEMPAth","b","e","m","base","join","reduce","str","elementName","modifiers","Array","isArray","filter","Boolean","Object","entries","value","map","a","men","women","mars","venera","setPins","type","payload","setAddressRowInMemory","setAddressColumnInMemory","setSelectedAddressInMemory","setPinsTypeWidth","width","setIsPinNotationClassical","isClassical","setMemoryDisplayType","displayType","setIsTactingEnabled","isEnabled","setIsRasCasEnabled","setDatumInMemory","datum","address","setMemory","data","setTacts","numberOfTacts","tacts","setCurrentTacts","toggleRasCas","initialState","memoryArray","fill","isDirty","selectedAddress","undefined","row","col","memory","state","action","update","parseInt","selectMemory","path","selectSelectedAddress","selectSelectedRow","selectSelectedColumn","MEMORY_MODE","MEMORY_STATE","ras","cas","addressWidth","dataWidth","enabled","readWrite","clock","currentTacts","pinsInfo","updatedValue","padStart","slice","selectAddress","selectData","selectDataWidth","selectAddressWidth","selectEnabled","selectMemoryState","selectClock","selectTacts","selectCurrentTacts","selectRas","selectCas","isPinsNotationClassical","isTactingEnabled","isRasCasEnabled","memoryDisplayType","visualizationSettings","selectIsPinNotationClassical","selectIsTactingEnabled","selectMemoryDisplayType","selectIsRasCasEnabled","useAction","actionFn","dispatch","useDispatch","memedAct","useMemo","useCallback","apply","arguments","useCellOrder","addressLength","useSelector","totalColumns","Math","pow","floor","cellIndex","column","totalRows","useReadWriteMemoryDatum","setPinsAct","setSelectedAddressInMemoryAct","setSelectedRowInMemoryAct","setSelectedColInMemoryAct","memorizedInfo","setDatumInMemoryAct","selectedAddressInMemory","selectedRowInMemory","selectedColInMemory","memoryState","useEffect","console","log","take","ceil","takeLast","setDatum","BEM","Memory","selectedRow","compose","length","selectedColumn","dataLength","getCellOrder","cellHeight","containerWidth","cellWidth","containerHeight","widthForChar","cellY","cellX","textX","textY","cellMargin","colIndex","x","y","rowIndex","verticalOffset","fontSize","rowWidth","rowHeight","colWidth","colHeight","useMemoryCSSMeasures","getCellCoordinates","getColCoordinates","getRowCoordinates","headerHeight","style","minHeight","className","cell","selectedAddressStyles","dirtyAddressStyles","key","height","id","font-size","r","index","isRowSelected","isColSelected","PinsBlock","binaryData","setBinaryData","isDisabled","useState","split","binaryDataArray","setBinaryDataArray","classicalNotation","pinWidth","crossedNotationYPosition","PIN_HEIGHT","pin","onClick","pinIndex","updatedPinValue","Number","updatedDataArray","includes","x1","y1","x2","y2","DataControls","setPinsWidthAct","name","min","max","defaultValue","onInput","ev","target","AddressControls","toggleRasCasAct","useToggleRasCas","repeat","StateControls","setMemoryState","setEnabled","ClockControls","setTactsAct","setCurrentTactsAct","resetClockTimeout","useRef","current","setTimeout","clearTimeout","useTacting","handleClock","onChange","MemoryControls","setMemoryAct","memoryCell","useControlMemorySize","useControlMemoryDatumWidth","VisualizationSettings","isPinNotationClassical","setIsPinNotationClassicalAct","setIsTactingEnabledAct","setMemoryDisplayTypeAct","setIsRasCasEnabledAct","checked","RamVisualization","window","location","hostname","match","combineReducers","configureStore","createStore","reducers","devToolsEnhancer","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.298f41b9.chunk.js","sourcesContent":["// Author: neformal13 https://gist.github.com/neformal13/00ac31d02eedf669768bd106482d2d3c\ntype Modifier = any[] | Record<string, any>;\ntype B = (b: string) => (elementName?: string | Modifier, modifiers?: Modifier) => string;\ntype GetBEMPAth = (b: string, e: string, m: string[]) => string;\n\nconst ELEMENT_SEPARATOR = \"__\";\nconst MODIFIER_SEPARATOR = \"_\";\n\nconst getBEMPAth: GetBEMPAth = (b, e, m) => {\n  const base = e !== \"\" ? [b, e].join(ELEMENT_SEPARATOR) : b;\n\n  return `${base} ${m.reduce((str, m) => `${str} ${base}${MODIFIER_SEPARATOR}${m}`, \"\")}`;\n};\n\nconst b: B = (b) => (elementName, modifiers = []) => {\n  modifiers = typeof elementName === \"string\" ? modifiers : elementName || [];\n\n  return getBEMPAth(\n    b,\n    typeof elementName === \"string\" ? elementName : \"\",\n    Array.isArray(modifiers)\n      ? modifiers.filter(Boolean)\n      : Object.entries(modifiers)\n          .filter(([, value]) => Boolean(value))\n          .map(([key]) => key)\n  );\n};\n\nexport default b;\n\n// Tests\nconst a = b(\"Hello\"); /*?*/\na(); /*?*/\na([\"men\", \"women\"]); /*?*/\na({ men: true, women: false }); /*?*/\na(\"world\"); /*?*/\na(\"world\", [\"mars\", \"venera\"]); /*?*/\na(\"world\", { mars: true, venera: false }); /*?*/\n","export const SET_PINS_WIDTH = \"SET_PINS_WIDTH\";\nexport const SET_PINS = \"SET_PINS\";\n\n// These actions are use for RAS / CAS mode,\n// when row and column address are set separately\nexport const SET_ADDRESS_ROW = \"SET_ADDRESS_ROW\";\nexport const SET_ADDRESS_COLUMN = \"SET_ADDRESS_COLUMN\";\n\nexport const SET_MEMORY = \"SET_MEMORY\";\nexport const SET_TACTS = \"SET_TACTS\";\nexport const SET_CURRENT_TACTS = \"SET_CURRENT_TACTS\";\n\nexport const TOGGLE_RAS_CAS = \"TOGGLE_RAS_CAS\";\n\nexport const WRITE_DATUM_IN_MEMORY = \"WRITE_DATUM_IN_MEMORY\";\nexport const READ_DATUM_FROM_MEMORY = \"READ_DATUM_FROM_MEMORY\";\n\nexport const SET_IS_PIN_NOTATION_CLASSICAL = \"SET_IS_PIN_NOTATION_CLASSICAL\";\nexport const SET_IS_TACTING_ENABLED = \"SET_IS_TACTING_ENABLED\";\nexport const SET_IS_RAS_CAS_ENABLED = \"SET_IS_RAS_CAS_ENABLED\";\nexport const SET_MEMORY_DISPLAY_TYPE = \"SET_MEMORY_DISPLAY_TYPE\";\n\nexport const SET_SELECTED_ROW_IN_MEMORY = \"SET_SELECTED_ROW_IN_MEMORY\";\nexport const SET_SELECTED_COL_IN_MEMORY = \"SET_SELECTED_COL_IN_MEMORY\";\nexport const SET_SELECTED_ADDRESS_IN_MEMORY = \"SET_SELECTED_ADDRESS_IN_MEMORY\";\n\nexport const setPins = (type, value) => ({ type: SET_PINS, payload: { type, value } });\n\nexport const setRas = (value) => ({ type: SET_ADDRESS_ROW, payload: value });\nexport const setCas = (value) => ({ type: SET_ADDRESS_COLUMN, payload: value });\n\nexport const setAddressRowInMemory = (value) => ({ type: SET_SELECTED_ROW_IN_MEMORY, payload: value });\nexport const setAddressColumnInMemory = (value) => ({ type: SET_SELECTED_COL_IN_MEMORY, payload: value });\nexport const setSelectedAddressInMemory = (value) => ({ type: SET_SELECTED_ADDRESS_IN_MEMORY, payload: value });\n\nexport const setPinsTypeWidth = (type, width) => ({ type: SET_PINS_WIDTH, payload: { type, width } });\n\nexport const setIsPinNotationClassical = (isClassical) => ({\n  type: SET_IS_PIN_NOTATION_CLASSICAL,\n  payload: { isClassical },\n});\n\nexport const setMemoryDisplayType = (displayType) => ({\n  type: SET_MEMORY_DISPLAY_TYPE,\n  payload: { displayType },\n});\n\nexport const setIsTactingEnabled = (isEnabled) => ({\n  type: SET_IS_TACTING_ENABLED,\n  payload: { isEnabled },\n});\n\nexport const setIsRasCasEnabled = (isEnabled) => ({\n  type: SET_IS_RAS_CAS_ENABLED,\n  payload: { isEnabled },\n});\n\nexport const setDatumInMemory = (datum, address) => ({\n  type: WRITE_DATUM_IN_MEMORY,\n  payload: {\n    datum,\n    address,\n  },\n});\n\nexport const setMemory = (data) => {\n  return {\n    type: SET_MEMORY,\n    payload: {\n      data,\n    },\n  };\n};\n\nexport const setTacts = (numberOfTacts) => ({ type: SET_TACTS, payload: { tacts: numberOfTacts } });\nexport const setCurrentTacts = (numberOfTacts) => ({ type: SET_CURRENT_TACTS, payload: { tacts: numberOfTacts } });\n\nexport const toggleRasCas = () => ({ type: TOGGLE_RAS_CAS });\n","import {\n  SET_MEMORY,\n  WRITE_DATUM_IN_MEMORY,\n  SET_SELECTED_ADDRESS_IN_MEMORY,\n  SET_SELECTED_ROW_IN_MEMORY,\n  SET_SELECTED_COL_IN_MEMORY,\n} from \"../actions\";\nimport { path, update } from \"ramda\";\n\nconst initialState = {\n  memoryArray: new Array(16).fill({ datum: \"0000\", isDirty: false }),\n  selectedAddress: { address: undefined, row: undefined, col: undefined },\n};\n\nconst memory = (state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_SELECTED_ADDRESS_IN_MEMORY: {\n      return {\n        ...state,\n        selectedAddress: { ...state.selectedAddress, address: payload },\n      };\n    }\n    case SET_SELECTED_ROW_IN_MEMORY: {\n      return {\n        ...state,\n        selectedAddress: { ...state.selectedAddress, row: payload },\n      };\n    }\n    case SET_SELECTED_COL_IN_MEMORY: {\n      return {\n        ...state,\n        selectedAddress: { ...state.selectedAddress, col: payload },\n      };\n    }\n    case WRITE_DATUM_IN_MEMORY: {\n      const { address, datum } = payload;\n      return {\n        ...state,\n        memoryArray: update(parseInt(address, 2), { datum, isDirty: true })(state.memoryArray),\n      };\n    }\n    case SET_MEMORY: {\n      return { ...state, memoryArray: payload.data };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default memory;\n\nexport const selectMemory = (state) => path([\"memory\", \"memoryArray\"], state);\n\nexport const selectSelectedAddress = (state) => path([\"memory\", \"selectedAddress\", \"address\"], state);\nexport const selectSelectedRow = (state) => path([\"memory\", \"selectedAddress\", \"row\"], state);\nexport const selectSelectedColumn = (state) => path([\"memory\", \"selectedAddress\", \"col\"], state);\n","export const MEMORY_MODE = {\n  READ: \"1\",\n  WRITE: \"0\",\n};\n\nexport const MEMORY_STATE = {\n  ENABLED: \"1\",\n  DISABLED: \"0\",\n};\n","import { path, take, takeLast, compose } from \"ramda\";\nimport {\n  SET_PINS,\n  SET_PINS_WIDTH,\n  SET_TACTS,\n  SET_CURRENT_TACTS,\n  SET_ADDRESS_ROW,\n  SET_ADDRESS_COLUMN,\n  TOGGLE_RAS_CAS,\n} from \"../actions\";\nimport { MEMORY_MODE, MEMORY_STATE } from \"../../helpers/consts\";\n\nconst initialState = {\n  address: \"0000\",\n  ras: \"0\",\n  cas: \"0\",\n  addressWidth: 4,\n  data: \"0000\",\n  dataWidth: 4,\n  enabled: MEMORY_STATE.ENABLED,\n  readWrite: MEMORY_MODE.WRITE,\n  clock: \"0\",\n  tacts: 4,\n  currentTacts: 0,\n};\n\nconst pinsInfo = (state = initialState, action) => {\n  const { payload } = action;\n  switch (action.type) {\n    case SET_ADDRESS_ROW:\n      return {\n        ...state,\n        ras: payload,\n      };\n    case SET_ADDRESS_COLUMN:\n      return {\n        ...state,\n        cas: payload,\n      };\n\n    case SET_PINS:\n      return { ...state, [payload.type]: payload.value };\n\n    case TOGGLE_RAS_CAS:\n      return { ...state, ras: state.ras === \"1\" ? \"0\" : \"1\", cas: state.cas === \"1\" ? \"0\" : \"1\" };\n\n    case SET_TACTS:\n      return { ...state, tacts: payload.tacts, currentTacts: payload.tacts };\n\n    case SET_CURRENT_TACTS:\n      return { ...state, currentTacts: payload.tacts };\n\n    case SET_PINS_WIDTH: {\n      const { type, width } = payload;\n      const updatedValue = state[type].padStart(width, \"0\").slice(-width);\n      return {\n        ...state,\n        [type]: updatedValue,\n        [`${type}Width`]: width,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default pinsInfo;\n\nexport const selectAddress = (state) => path([\"pinsInfo\", \"address\"], state);\nexport const selectData = (state) => path([\"pinsInfo\", \"data\"], state);\nexport const selectDataWidth = (state) => path([\"pinsInfo\", \"dataWidth\"], state);\nexport const selectAddressWidth = (state) => path([\"pinsInfo\", \"addressWidth\"], state);\nexport const selectEnabled = (state) => path([\"pinsInfo\", \"enabled\"], state);\nexport const selectMemoryState = (state) => path([\"pinsInfo\", \"readWrite\"], state);\nexport const selectClock = (state) => path([\"pinsInfo\", \"clock\"], state);\nexport const selectTacts = (state) => path([\"pinsInfo\", \"tacts\"], state);\nexport const selectCurrentTacts = (state) => path([\"pinsInfo\", \"currentTacts\"], state);\n\nexport const selectRas = (state) => path([\"pinsInfo\", \"ras\"], state);\nexport const selectCas = (state) => path([\"pinsInfo\", \"cas\"], state);\n\nexport const selectAddressRow = (isRasCasEnabled) => (state) => {\n  // if (isRasCasEnabled) return path([\"pinsInfo\", \"ras\"], state);\n  return compose((address) => take(Math.floor(address.length / 2), address), path([\"pinsInfo\", \"address\"]))(state);\n};\n\nexport const selectAddressColumn = (isRasCasEnabled) => (state) => {\n  // if (isRasCasEnabled) return path([\"pinsInfo\", \"cas\"], state);\n  return compose((address) => takeLast(Math.ceil(address.length / 2), address), path([\"pinsInfo\", \"address\"]))(state);\n};\n","import {\n  SET_IS_PIN_NOTATION_CLASSICAL,\n  SET_IS_TACTING_ENABLED,\n  SET_MEMORY_DISPLAY_TYPE,\n  SET_IS_RAS_CAS_ENABLED,\n} from \"../actions\";\nimport { path } from \"ramda\";\n\nconst initialState = {\n  isPinsNotationClassical: false,\n  isTactingEnabled: false,\n  isRasCasEnabled: false,\n  memoryDisplayType: \"matrix\",\n};\n\nconst visualizationSettings = (state = initialState, action) => {\n  const { payload, type } = action;\n  switch (type) {\n    case SET_IS_PIN_NOTATION_CLASSICAL:\n      return {\n        ...state,\n        isPinsNotationClassical: payload.isClassical,\n      };\n    case SET_IS_TACTING_ENABLED:\n      return {\n        ...state,\n        isTactingEnabled: payload.isEnabled,\n        isRasCasEnabled: payload.isEnabled ? state.isRasCasEnabled : false,\n      };\n    case SET_IS_RAS_CAS_ENABLED:\n      return {\n        ...state,\n        isTactingEnabled: payload.isEnabled ? payload.isEnabled : state.isTactingEnabled,\n        isRasCasEnabled: payload.isEnabled,\n      };\n    case SET_MEMORY_DISPLAY_TYPE:\n      return {\n        ...state,\n        memoryDisplayType: payload.displayType,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default visualizationSettings;\n\nexport const selectIsPinNotationClassical = (state) =>\n  path([\"visualizationSettings\", \"isPinsNotationClassical\"], state);\n\nexport const selectIsTactingEnabled = (state) => path([\"visualizationSettings\", \"isTactingEnabled\"], state);\n\nexport const selectMemoryDisplayType = (state) => path([\"visualizationSettings\", \"memoryDisplayType\"], state);\n\nexport const selectIsRasCasEnabled = (state) => path([\"visualizationSettings\", \"isRasCasEnabled\"], state);\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useMemo } from \"react\";\n\nexport const useAction = (actionFn) => {\n  const dispatch = useDispatch();\n  const memedAct = useMemo(() => actionFn, [actionFn]);\n  return useCallback(\n    function callback() {\n      dispatch(memedAct.apply(null, arguments));\n    },\n    [dispatch, memedAct]\n  );\n};\n","import { useAction } from \"./reactRedux.hks\";\nimport {\n  setMemory,\n  setPins,\n  setDatumInMemory,\n  setCurrentTacts,\n  toggleRasCas,\n  setSelectedAddressInMemory,\n  setAddressColumnInMemory,\n  setAddressRowInMemory,\n} from \"../redux/actions\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectDataWidth,\n  selectAddressWidth,\n  selectAddress,\n  selectEnabled,\n  selectData,\n  selectMemoryState,\n  selectTacts,\n  selectCurrentTacts,\n  selectClock,\n  selectRas,\n  selectCas,\n} from \"../redux/reducers/pinsInfo.red\";\nimport {\n  selectMemory,\n  selectSelectedAddress,\n  selectSelectedRow,\n  selectSelectedColumn,\n} from \"../redux/reducers/memory.red\";\nimport { useEffect } from \"react\";\nimport { compose } from \"redux\";\nimport { map, take, takeLast } from \"ramda\";\nimport { MEMORY_STATE, MEMORY_MODE } from \"../helpers/consts\";\nimport { selectIsRasCasEnabled, selectIsTactingEnabled } from \"../redux/reducers/visualizationSettings.red\";\nimport { useRef } from \"react\";\n\nexport const useToggleRasCas = () => {\n  const setPinsAct = useAction(setPins);\n  const toggleRasCasAct = useAction(toggleRasCas);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n  const currentTacts = useSelector(selectCurrentTacts);\n\n  useEffect(() => {\n    if (isRasCasEnabled) setPinsAct(\"ras\", \"1\");\n  }, [isRasCasEnabled, setPinsAct]);\n\n  useEffect(() => {\n    if (isRasCasEnabled && currentTacts === 0) {\n      toggleRasCasAct();\n    }\n  }, [currentTacts, toggleRasCasAct]);\n};\n\nexport const useControlMemorySize = () => {\n  const setMemoryAct = useAction(setMemory);\n\n  const dataWidth = useSelector(selectDataWidth);\n  const addressWidth = useSelector(selectAddressWidth);\n  const memorizedInfo = useSelector(selectMemory);\n\n  useEffect(() => {\n    if (addressWidth) {\n      compose(\n        setMemoryAct,\n        (memory) => memory.map((memoryCell, index) => memorizedInfo[index] || memoryCell),\n        (memory) =>\n          memory.fill({\n            isDirty: false,\n            datum: \"0\".repeat(dataWidth),\n          })\n      )(new Array(Math.pow(2, addressWidth)));\n    }\n  }, [addressWidth, dataWidth, setMemoryAct]);\n};\n\n// This hook controlls memory datum width\n// Add adds zeros from the left to the datum, in case data width was increased\nexport const useControlMemoryDatumWidth = () => {\n  const setMemoryAct = useAction(setMemory);\n  const dataWidth = useSelector(selectDataWidth);\n  const memorizedInfo = useSelector(selectMemory);\n\n  useEffect(() => {\n    compose(\n      setMemoryAct,\n      map((cell) => ({\n        ...cell,\n        datum: cell.datum.padStart(dataWidth, \"0\").slice(-dataWidth),\n      }))\n    )(memorizedInfo);\n  }, [dataWidth, setMemoryAct]);\n};\n\n// This hook determines cell row and column order in matrix view\nexport const useCellOrder = () => {\n  const addressLength = useSelector(selectAddressWidth);\n  const getCellOrder = (cellIndex) => ({\n    column: cellIndex % Math.pow(2, Math.floor(addressLength / 2)),\n    row: Math.floor(cellIndex / Math.pow(2, Math.floor(addressLength / 2))),\n  });\n\n  const totalColumns = Math.pow(2, Math.floor(addressLength / 2));\n  const totalRows = Math.floor(Math.pow(2, addressLength) / Math.pow(2, Math.floor(addressLength / 2)));\n  return [getCellOrder, { totalRows, totalColumns }];\n};\n\n// ---\n\nexport const useTacting = () => {\n  const setCurrentTactsAct = useAction(setCurrentTacts);\n  const setPinsAct = useAction(setPins);\n\n  const tacts = useSelector(selectTacts);\n  const clock = useSelector(selectClock);\n  const isTactingEnabled = useSelector(selectIsTactingEnabled);\n  const currentTacts = useSelector(selectCurrentTacts);\n  const toggleRasCasAct = useAction(toggleRasCas);\n  // reset clock pin to 0 state after a small timeout\n  const resetClockTimeout = useRef(null);\n  useEffect(() => {\n    if (clock === \"1\")\n      resetClockTimeout.current = setTimeout(() => {\n        setPinsAct(\"clock\", \"0\");\n      }, 500);\n    return () => clearTimeout(resetClockTimeout.current);\n  }, [clock, currentTacts, setPinsAct, toggleRasCasAct]);\n\n  // reset current tacts to default tacts number, if current tacts number reached 0\n  useEffect(() => {\n    console.log(\"==!@#= > \", isTactingEnabled);\n    if (isTactingEnabled && !currentTacts && clock === \"0\") setCurrentTactsAct(tacts);\n    // else if (!isTactingEnabled) setCurrentTactsAct(0);\n  }, [isTactingEnabled, tacts, currentTacts, clock, setCurrentTactsAct]);\n\n  const handleSetClock = () => {\n    if (currentTacts > 0) {\n      setPinsAct(\"clock\", \"1\");\n      setCurrentTactsAct(currentTacts - 1);\n    }\n  };\n\n  return [handleSetClock];\n};\n\nexport const useReadWriteMemoryDatum = () => {\n  const setPinsAct = useAction(setPins);\n  const setSelectedAddressInMemoryAct = useAction(setSelectedAddressInMemory);\n  const setSelectedRowInMemoryAct = useAction(setAddressRowInMemory);\n  const setSelectedColInMemoryAct = useAction(setAddressColumnInMemory);\n  const memorizedInfo = useSelector(selectMemory);\n  const setDatumInMemoryAct = useAction(setDatumInMemory);\n  const address = useSelector(selectAddress);\n  const addressWidth = useSelector(selectAddressWidth);\n  const selectedAddressInMemory = useSelector(selectSelectedAddress);\n  const selectedRowInMemory = useSelector(selectSelectedRow);\n  const selectedColInMemory = useSelector(selectSelectedColumn);\n  const enabled = useSelector(selectEnabled);\n  const datum = useSelector(selectData);\n  const memoryState = useSelector(selectMemoryState);\n  const currentTacts = useSelector(selectCurrentTacts);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n  const ras = useSelector(selectRas);\n  const cas = useSelector(selectCas);\n\n  const setDatum = (datum) => setPinsAct(\"data\", datum);\n\n  useEffect(() => {\n    console.log(\"=== > \", selectedColInMemory, selectedRowInMemory);\n    if (selectedRowInMemory && selectedColInMemory) {\n      setSelectedAddressInMemoryAct(`${selectedRowInMemory}${selectedColInMemory}`);\n    }\n  }, [selectedRowInMemory, selectedColInMemory, setSelectedAddressInMemoryAct]);\n\n  // update datum in memory if address is already selected\n  useEffect(() => {\n    if (selectedAddressInMemory) {\n      setDatumInMemoryAct(datum, selectedAddressInMemory);\n      setSelectedAddressInMemoryAct(\"\");\n      setSelectedRowInMemoryAct(\"\");\n      setSelectedColInMemoryAct(\"\");\n    }\n  }, [selectedAddressInMemory, datum, setDatumInMemoryAct, setSelectedColInMemoryAct, setSelectedRowInMemoryAct]);\n\n  // set selected address in memory\n  useEffect(() => {\n    if (enabled === MEMORY_STATE.ENABLED && memoryState === MEMORY_MODE.WRITE && currentTacts === 0) {\n      if (!isRasCasEnabled) {\n        setSelectedAddressInMemoryAct(address);\n      } else {\n        if (ras === \"1\") {\n          setSelectedRowInMemoryAct(take(Math.ceil(addressWidth / 2), address));\n        } else {\n          setSelectedColInMemoryAct(takeLast(Math.floor(addressWidth / 2), address));\n        }\n      }\n    }\n  }, [enabled, memoryState, address, datum, currentTacts, addressWidth, setDatumInMemoryAct]);\n\n  // read datum from memory back into data output pin\n  useEffect(() => {\n    if (memorizedInfo[parseInt(address, 2)] && memoryState === MEMORY_MODE.READ) {\n      setDatum(memorizedInfo[parseInt(address, 2)].datum);\n    }\n  }, [memoryState, address]);\n};\n","import React from \"react\";\nimport BEM from \"../../helpers/BEM\";\n\nimport \"./Memory.scss\";\nimport { useSelector } from \"react-redux\";\nimport { selectMemory } from \"../../redux/reducers/memory.red\";\nimport {\n  selectAddress,\n  selectAddressRow,\n  selectAddressColumn,\n  selectAddressWidth,\n} from \"../../redux/reducers/pinsInfo.red\";\nimport { selectMemoryDisplayType, selectIsRasCasEnabled } from \"../../redux/reducers/visualizationSettings.red\";\nimport { useCellOrder } from \"../../hooks\";\nimport { useMemoryCSSMeasures } from \"../../hooks/htmlElements.hks\";\n\nconst b = BEM(\"Memory\");\n\nconst Memory = () => {\n  const memorizedInfo = useSelector(selectMemory);\n  const displayType = useSelector(selectMemoryDisplayType);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n  const selectedAddress = useSelector(selectAddress);\n  const selectedRow = useSelector(selectAddressRow(isRasCasEnabled));\n  const selectedColumn = useSelector(selectAddressColumn(isRasCasEnabled));\n  const addressWidth = useSelector(selectAddressWidth);\n\n  const [\n    getCellCoordinates,\n    getColCoordinates,\n    getRowCoordinates,\n    { cellWidth, cellHeight, cellMargin, verticalOffset: headerHeight, containerWidth, containerHeight, fontSize },\n    { rowWidth, rowHeight },\n    { colWidth, colHeight },\n  ] = useMemoryCSSMeasures();\n\n  console.log(\"=== >\", fontSize);\n\n  const [, { totalRows, totalColumns }] = useCellOrder();\n\n  return (\n    <svg x={0} y={0} style={{ minHeight: containerHeight, width: containerWidth }} className={b()}>\n      <g>\n        <g>\n          <text className={b(\"header\")} x={cellWidth - cellMargin} y={headerHeight / 2}>\n            Address\n          </text>\n          <text className={b(\"header\")} x={cellWidth * 2} y={headerHeight / 2}>\n            Data\n          </text>\n        </g>\n        {memorizedInfo.map((cell, cellIndex) => {\n          const { cellX, cellY, textX, textY } = getCellCoordinates(cellIndex);\n\n          const selectedAddressStyles =\n            parseInt(selectedAddress, 2) === cellIndex && selectedAddress.length === addressWidth ? \"selected\" : \"\";\n          const dirtyAddressStyles = cell.isDirty ? \"dirty\" : \"\";\n\n          return (\n            <g key={cellIndex}>\n              {displayType === \"table\" && (\n                <g>\n                  <rect\n                    x={0}\n                    y={cellY}\n                    width={cellWidth}\n                    height={cellHeight}\n                    className={b(\"cellAddress\", [selectedAddressStyles, dirtyAddressStyles])}\n                  ></rect>\n                  <text className={b(\"addressLabel\")} x={cellX - cellMargin} y={cellY + (cellHeight + cellMargin) / 2}>\n                    {cellIndex}\n                  </text>\n                </g>\n              )}\n              <g id={cellIndex}>\n                <rect\n                  x={cellX}\n                  y={cellY}\n                  width={cellWidth}\n                  height={cellHeight}\n                  className={b(\"cell\", [selectedAddressStyles, dirtyAddressStyles])}\n                ></rect>\n                <text className={b(\"dataLabel\")} x={textX} y={textY} font-size={`${fontSize}px`}>\n                  {cell.datum}\n                </text>\n              </g>\n            </g>\n          );\n        })}\n        {new Array(totalRows).fill(\"\").map((r, index) => {\n          const { x, y } = getRowCoordinates(index);\n          const isRowSelected = displayType === \"matrix\" && index === parseInt(selectedRow, 2);\n          return (\n            <rect x={x} y={y} width={rowWidth} height={rowHeight} className={b(\"row\", [isRowSelected && \"selected\"])} />\n          );\n        })}\n        {new Array(totalColumns).fill(\"\").map((r, index) => {\n          const { x, y } = getColCoordinates(index);\n          const isColSelected = displayType === \"matrix\" && index === parseInt(selectedColumn, 2);\n\n          return (\n            <rect\n              x={x}\n              y={y}\n              width={colWidth}\n              height={colHeight}\n              className={b(\"column\", [isColSelected && \"selected\"])}\n            />\n          );\n        })}\n      </g>\n    </svg>\n  );\n};\n\nexport default Memory;\n","import { useSelector } from \"react-redux\";\nimport { selectMemoryDisplayType } from \"../redux/reducers/visualizationSettings.red\";\nimport { selectAddressWidth, selectDataWidth } from \"../redux/reducers/pinsInfo.red\";\nimport { useCellOrder } from \".\";\n\n// This hook encapsulates the calculation of cell position in table / matrix view\nexport const useMemoryCSSMeasures = () => {\n  const displayType = useSelector(selectMemoryDisplayType);\n  const addressLength = useSelector(selectAddressWidth);\n  const dataLength = useSelector(selectDataWidth);\n\n  const [getCellOrder] = useCellOrder();\n\n  // vertical offset is needed to leave some place for header\n  const verticalOffset = 22;\n  const cellWidth = 70;\n  const cellMargin = 2;\n  const cellHeight = displayType === \"table\" ? 20 : 33;\n\n  const containerWidth =\n    displayType === \"table\"\n      ? cellWidth * 2 + cellMargin\n      : (cellWidth + cellMargin) * Math.pow(2, Math.floor(addressLength / 2));\n  const containerHeight =\n    displayType === \"table\"\n      ? verticalOffset + Math.pow(2, addressLength) * (cellHeight + cellMargin)\n      : verticalOffset + Math.pow(2, Math.ceil(addressLength / 2)) * (cellHeight + cellMargin);\n\n  const getCellPosition = (cellIndex) => {\n    if (displayType === \"table\") {\n      const cellY = verticalOffset + cellIndex * (cellHeight + cellMargin);\n      return {\n        cellX: cellWidth + cellMargin,\n        cellY,\n        textX: 2 * cellWidth,\n        textY: cellY + (cellHeight + cellMargin) / 2,\n      };\n    }\n    const { row, column } = getCellOrder(cellIndex);\n    return {\n      cellX: column * (cellWidth + cellMargin),\n      cellY: row * (cellHeight + cellMargin),\n      textX: column * (cellWidth + cellMargin) + cellWidth - cellMargin * 2,\n      textY: row * (cellHeight + cellMargin) + (cellHeight + cellMargin) / 2,\n    };\n  };\n\n  const getRowPosition = (rowIndex) => console.log(rowIndex) || { x: 0, y: rowIndex * (cellHeight + cellMargin) };\n  const getColPosition = (colIndex) => ({ x: colIndex * (cellWidth + cellMargin), y: 0 });\n  const widthForChar = cellWidth / dataLength;\n  const MIN_FONT_SIZE = 13;\n  const MAX_FONT_SIZE = 20;\n\n  return [\n    getCellPosition,\n    getColPosition,\n    getRowPosition,\n    {\n      cellWidth,\n      cellHeight,\n      cellMargin,\n      verticalOffset,\n      containerWidth,\n      containerHeight,\n      fontSize:\n        widthForChar > MAX_FONT_SIZE\n          ? MAX_FONT_SIZE\n          : widthForChar < MIN_FONT_SIZE\n          ? MIN_FONT_SIZE\n          : cellWidth / dataLength,\n    },\n    { rowWidth: containerWidth - cellMargin, rowHeight: cellHeight },\n    { colWidth: cellWidth, colHeight: containerHeight - verticalOffset - cellMargin },\n  ];\n};\n","import React, { useState, useEffect } from \"react\";\nimport { update, includes } from \"ramda\";\nimport BEM from \"../../helpers/BEM\";\n\nimport { useSelector } from \"react-redux\";\nimport { selectIsPinNotationClassical } from \"../../redux/reducers/visualizationSettings.red\";\n\nimport \"./PinsBlock.scss\";\n\nconst b = BEM(\"PinsBlock\");\n\nconst PIN_HEIGHT = 20;\nconst PIN_LABEL_MARGIN = 3;\n\nconst PinsBlock = ({ binaryData, setBinaryData, isDisabled = false }) => {\n  const [binaryDataArray, setBinaryDataArray] = useState(`${binaryData}`.split(\"\"));\n  const classicalNotation = useSelector(selectIsPinNotationClassical);\n\n  console.log(\"---binary data-- \", binaryData);\n\n  useEffect(() => {\n    if (binaryData) setBinaryDataArray(`${binaryData}`.split(\"\"));\n  }, [binaryData]);\n\n  const handleDataPinClick = (pinIndex) => () => {\n    if (isDisabled) return;\n    if (setBinaryData) {\n      const updatedPinValue = Number(binaryDataArray[pinIndex]) === 0 ? \"1\" : \"0\";\n      const updatedDataArray = update(pinIndex, updatedPinValue, binaryDataArray);\n      setBinaryDataArray(updatedDataArray);\n      setBinaryData(updatedDataArray.join(\"\"));\n    }\n  };\n  const defaultPinWidth = 125;\n  const pinWidth = classicalNotation ? 25 : defaultPinWidth;\n  const crossedNotationYPosition = (binaryDataArray.length * PIN_HEIGHT) / 2 + PIN_HEIGHT / 2;\n  return (\n    <div className={b()}>\n      <svg className={b(\"list\")} width={defaultPinWidth} height={(binaryDataArray.length + 1) * PIN_HEIGHT}>\n        {binaryDataArray.map((pin, id) => {\n          return (\n            <g key={id} onClick={handleDataPinClick(id)}>\n              {binaryDataArray.length > 1 && includes(id, [0, binaryDataArray.length - 1]) && (\n                <text x=\"0\" y={id * PIN_HEIGHT + PIN_HEIGHT - PIN_LABEL_MARGIN} className={b(\"pinSignificance\")}>\n                  {id === 0 ? \"MSB\" : \"LSB\"}\n                </text>\n              )}\n              <text\n                x={0}\n                y={id * PIN_HEIGHT + PIN_HEIGHT - PIN_LABEL_MARGIN}\n                className={b(\"pinLabel\", [pin === \"1\" ? \"enabled\" : \"disabled\"])}\n              >\n                {pin}\n              </text>\n              <rect x={0} y={id * PIN_HEIGHT} height={PIN_HEIGHT} width={pinWidth} className={b(\"pinArea\")} />\n              <line\n                x1={0}\n                y1={id * PIN_HEIGHT + PIN_HEIGHT}\n                x2={defaultPinWidth}\n                y2={id * PIN_HEIGHT + PIN_HEIGHT}\n                className={b(\"pin\", [classicalNotation ? \"short\" : \"long\"])}\n              />\n            </g>\n          );\n        })}\n        <line\n          x1={pinWidth}\n          y1={PIN_HEIGHT}\n          x2={pinWidth}\n          y2={binaryDataArray.length * PIN_HEIGHT}\n          className={b(\"pinsDivider\", [classicalNotation ? \"visible\" : \"invisible\"])}\n        />\n        <text\n          x={64}\n          y={crossedNotationYPosition - PIN_LABEL_MARGIN}\n          className={b(\"pinsNumber\", [classicalNotation ? \"visible\" : \"invisible\"])}\n        >\n          {binaryDataArray.length}\n        </text>\n        <line\n          x1={classicalNotation ? 70 : defaultPinWidth}\n          y1={crossedNotationYPosition + 1}\n          x2={classicalNotation ? 90 : defaultPinWidth}\n          y2={crossedNotationYPosition + 1}\n          className={b(\"crossNotation\", [classicalNotation ? \"visible\" : \"invisible\"])}\n        />\n        <line\n          x1={pinWidth}\n          y1={crossedNotationYPosition}\n          x2={defaultPinWidth}\n          y2={crossedNotationYPosition}\n          className={b(\"pinsNotation\", [classicalNotation ? \"visible\" : \"invisible\"])}\n        />\n      </svg>\n    </div>\n  );\n};\n\nexport default PinsBlock;\n","import React from \"react\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setPinsTypeWidth, setPins } from \"../../redux/actions\";\nimport { useSelector } from \"react-redux\";\nimport { selectData, selectDataWidth, selectMemoryState } from \"../../redux/reducers/pinsInfo.red\";\nimport { MEMORY_MODE } from \"../../helpers/consts\";\nimport BEM from \"../../helpers/BEM\";\nimport Pins from \"../PinsBlock\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst DataControls = ({ id }) => {\n  const memoryState = useSelector(selectMemoryState);\n  const datum = useSelector(selectData);\n\n  const setPinsAct = useAction(setPins);\n  const setPinsWidthAct = useAction(setPinsTypeWidth);\n\n  const setDataLength = (width) => setPinsWidthAct(\"data\", width);\n  const setDatum = (datum) => setPinsAct(\"data\", datum);\n\n  const dataLength = useSelector(selectDataWidth);\n\n  const handleInputDataLength = (ev) => setDataLength(+ev.target.value);\n\n  return (\n    <div className={b(\"dataBlock\")}>\n      <label className={b(\"dataLabel\")}>\n        <div className={b(\"dataMode\")}>\n          <span className={b(\"dataModeLabel\")}>{memoryState === MEMORY_MODE.WRITE ? \"Input: \" : \"Output: \"}</span>\n          <span>\n            {datum} ({parseInt(datum, 2)})\n          </span>\n        </div>\n        <div className={b(\"bitsWidth\")}>width: {dataLength} bits</div>\n        <input\n          name=\"dataLength\"\n          type=\"range\"\n          min={1}\n          max={8}\n          defaultValue={dataLength}\n          onInput={handleInputDataLength}\n        />\n      </label>\n      <Pins binaryData={datum} setBinaryData={memoryState === MEMORY_MODE.WRITE && setDatum} />\n    </div>\n  );\n};\n\nexport default DataControls;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setPinsTypeWidth, setPins } from \"../../redux/actions\";\nimport { selectAddress, selectAddressWidth, selectRas, selectCas } from \"../../redux/reducers/pinsInfo.red\";\n\nimport BEM from \"../../helpers/BEM\";\n\nimport Pins from \"../PinsBlock\";\nimport { selectIsRasCasEnabled } from \"../../redux/reducers/visualizationSettings.red\";\nimport { useToggleRasCas } from \"../../hooks\";\n\nconst b = BEM(\"MemoryControls\");\n\nexport const AddressControls = () => {\n  const address = useSelector(selectAddress);\n  const addressLength = useSelector(selectAddressWidth);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n  const ras = useSelector(selectRas);\n  const cas = useSelector(selectCas);\n\n  const setPinsAct = useAction(setPins);\n  const setPinsWidthAct = useAction(setPinsTypeWidth);\n\n  const setAddressLength = (width) => setPinsWidthAct(\"address\", width);\n  const setAddress = (address) => setPinsAct(\"address\", address);\n\n  const handleInputAddressLength = (ev) => setAddressLength(+ev.target.value);\n\n  useToggleRasCas();\n\n  return (\n    <div className={b(\"addressBlock\")}>\n      <label className={b(\"addressLabel\")}>\n        <div>\n          Address: {address}\n          {\"_\".repeat(addressLength - address.length)} ({parseInt(address, 2)})\n        </div>\n        <div className={b(\"bitsWidth\")}>width: {addressLength} bits</div>\n        <input\n          name=\"addressLength\"\n          type=\"range\"\n          min={2}\n          max={8}\n          defaultValue={addressLength}\n          onInput={handleInputAddressLength}\n        />\n      </label>\n      <div className={b(\"addressPins\")}>\n        <Pins binaryData={address} setBinaryData={setAddress} />\n        {isRasCasEnabled && (\n          <>\n            <div className={b(\"ras\")}>\n              <span className={b(\"rasLabel\", [ras === \"1\" && \"active\"])}>ras</span>\n              <Pins binaryData={ras} isDisabled />\n            </div>\n            <div className={b(\"cas\")}>\n              <span className={b(\"casLabel\", [cas === \"1\" && \"active\"])}>cas</span>\n              <Pins binaryData={cas} isDisabled />\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AddressControls;\n","import React from \"react\";\nimport Pins from \"../PinsBlock\";\nimport BEM from \"../../helpers/BEM\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setPins } from \"../../redux/actions\";\nimport { useSelector } from \"react-redux\";\nimport { selectMemoryState, selectEnabled } from \"../../redux/reducers/pinsInfo.red\";\nimport { MEMORY_MODE, MEMORY_STATE } from \"../../helpers/consts\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst StateControls = () => {\n  const memoryState = useSelector(selectMemoryState);\n  const enabled = useSelector(selectEnabled);\n\n  const setPinsAct = useAction(setPins);\n\n  const setMemoryState = (readWrite) => setPinsAct(\"readWrite\", readWrite);\n  const setEnabled = () => {\n    setPinsAct(\"enabled\", enabled === MEMORY_STATE.ENABLED ? MEMORY_STATE.DISABLED : MEMORY_STATE.ENABLED);\n  };\n\n  return (\n    <div>\n      <div className={b(\"enabledBlock\")}>\n        <label onClick={setEnabled} className={b(\"enabledLabel\", [enabled === MEMORY_STATE.ENABLED && \"enabled\"])}>\n          Enable\n        </label>\n        <Pins binaryData={enabled} setBinaryData={setEnabled} />\n      </div>\n      <div className={b(\"readWriteBlock\")}>\n        <label className={b(\"readWriteLabel\")}>\n          <span\n            className={b(\"read\", [memoryState === MEMORY_MODE.READ && \"enabled\"])}\n            onClick={() => setMemoryState(MEMORY_MODE.READ)}\n          >\n            Read\n          </span>\n          /\n          <span\n            className={b(\"write\", [memoryState === MEMORY_MODE.WRITE && \"enabled\"])}\n            onClick={() => setMemoryState(MEMORY_MODE.WRITE)}\n          >\n            Write\n          </span>\n        </label>\n        <Pins binaryData={memoryState} setBinaryData={setMemoryState} />\n      </div>\n    </div>\n  );\n};\n\nexport default StateControls;\n","import React from \"react\";\nimport Pins from \"../PinsBlock\";\nimport BEM from \"../../helpers/BEM\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setTacts } from \"../../redux/actions\";\nimport { selectClock, selectCurrentTacts } from \"../../redux/reducers/pinsInfo.red\";\nimport { useSelector } from \"react-redux\";\nimport { selectTacts } from \"../../redux/reducers/pinsInfo.red\";\nimport { useTacting } from \"../../hooks\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst ClockControls = () => {\n  const clock = useSelector(selectClock);\n  const tacts = useSelector(selectTacts);\n  const currentTacts = useSelector(selectCurrentTacts);\n  const setTactsAct = useAction(setTacts);\n\n  const [handleClock] = useTacting();\n\n  return (\n    <div className={b(\"clockBlock\")}>\n      <div className={b(\"clockPinBlock\")}>\n        <label className={b(\"clockLabel\")}>\n          <div onClick={handleClock} className={b(\"clock\", [clock === \"1\" && \"enabled\"])}>\n            Clock <span className={b(\"currentTacts\")}>({currentTacts} tacts left)</span>\n          </div>\n          <div className={b(\"tacts\")}>\n            <input\n              type=\"number\"\n              className={b(\"tactsNumber\")}\n              value={tacts}\n              onChange={(ev) => setTactsAct(ev.target.value)}\n            />{\" \"}\n            Tacts <span className={b(\"tactsNote\")}>determined by the hardware producer</span>\n          </div>\n        </label>\n        <Pins binaryData={clock} setBinaryData={handleClock} />\n      </div>\n    </div>\n  );\n};\n\nexport default ClockControls;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { useControlMemorySize, useControlMemoryDatumWidth, useReadWriteMemoryDatum } from \"../../hooks\";\nimport DataControls from \"./DataControls\";\nimport AddressControls from \"./AddressControls\";\nimport BEM from \"../../helpers/BEM\";\nimport StateControls from \"./StateControls\";\nimport ClockControls from \"./ClockControls\";\nimport { selectIsTactingEnabled } from \"../../redux/reducers/visualizationSettings.red\";\n\nimport \"./MemoryControls.scss\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst MemoryControls = () => {\n  const isTactingEnabled = useSelector(selectIsTactingEnabled);\n\n  useControlMemorySize();\n  useControlMemoryDatumWidth();\n  useReadWriteMemoryDatum();\n\n  return (\n    <span className={b()}>\n      <DataControls />\n      <AddressControls />\n      <StateControls />\n      {isTactingEnabled && <ClockControls />}\n    </span>\n  );\n};\n\nexport default MemoryControls;\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport {\n  setIsPinNotationClassical,\n  setIsTactingEnabled,\n  setMemoryDisplayType,\n  setIsRasCasEnabled,\n  setCurrentTacts,\n} from \"../../redux/actions\";\nimport {\n  selectIsPinNotationClassical,\n  selectIsTactingEnabled,\n  selectMemoryDisplayType,\n  selectIsRasCasEnabled,\n} from \"../../redux/reducers/visualizationSettings.red\";\n\nimport BEM from \"../../helpers/BEM\";\nimport \"./VisualizationSettings.scss\";\n\nconst b = BEM(\"VisualizationSettings\");\n\nconst VisualizationSettings = () => {\n  const isTactingEnabled = useSelector(selectIsTactingEnabled);\n  const isPinNotationClassical = useSelector(selectIsPinNotationClassical);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n  const memoryDisplayType = useSelector(selectMemoryDisplayType);\n\n  const setIsPinNotationClassicalAct = useAction(setIsPinNotationClassical);\n  const setIsTactingEnabledAct = useAction(setIsTactingEnabled);\n  const setCurrentTactsAct = useAction(setCurrentTacts);\n  const setMemoryDisplayTypeAct = useAction(setMemoryDisplayType);\n  const setIsRasCasEnabledAct = useAction(setIsRasCasEnabled);\n\n  useEffect(() => {\n    if (!isTactingEnabled) setCurrentTactsAct(0);\n  }, [isTactingEnabled, setCurrentTactsAct]);\n\n  const handleDisplayTypeChange = () => {\n    const newDisplayType = memoryDisplayType === \"matrix\" ? \"table\" : \"matrix\";\n    setMemoryDisplayTypeAct(newDisplayType);\n  };\n\n  return (\n    <div className={b()}>\n      <label className={b(\"pinNotation\")}>\n        <input\n          className={b(\"pinNotationInput\")}\n          type=\"checkbox\"\n          checked={isPinNotationClassical}\n          onChange={() => setIsPinNotationClassicalAct(!isPinNotationClassical)}\n        />\n        Classical pin notation\n      </label>\n      <label className={b(\"tacting\")}>\n        <input\n          className={b(\"tactingInput\")}\n          type=\"checkbox\"\n          checked={isTactingEnabled}\n          onChange={() => setIsTactingEnabledAct(!isTactingEnabled)}\n        />\n        Tacting\n      </label>\n      <label className={b(\"tacting\")}>\n        <input\n          className={b(\"tactingInput\")}\n          type=\"checkbox\"\n          checked={memoryDisplayType === \"matrix\"}\n          onChange={handleDisplayTypeChange}\n        />\n        Matrix view\n      </label>\n      <label className={b(\"rasCas\")}>\n        <input\n          className={b(\"rasCasInput\")}\n          type=\"checkbox\"\n          checked={isRasCasEnabled}\n          onChange={() => setIsRasCasEnabledAct(!isRasCasEnabled)}\n        />\n        RAS / CAS\n      </label>\n    </div>\n  );\n};\n\nexport default VisualizationSettings;\n","import React from \"react\";\nimport Memory from \"../Memory\";\nimport BEM from \"../../helpers/BEM\";\n\nimport \"./RamVisualization.scss\";\nimport MemoryControls from \"../MemoryControls\";\nimport VisualizationSettings from \"../VisualizationSettings\";\n\nconst b = BEM(\"RamVisualization\");\n\nfunction RamVisualization() {\n  return (\n    <div className={b()}>\n      <div className={b(\"caption\")}>\n        <h1 className={b(\"header\")}>RAM Visualization</h1>\n        <VisualizationSettings />\n      </div>\n      <div className={b(\"visualization\")}>\n        <div className={b(\"pins\")}>\n          <MemoryControls />\n        </div>\n        <div className={b(\"memory\")}>\n          <Memory />\n        </div>\n      </div>\n      <div className={b(\"notes\")}>\n        <div>＊ LSB - Least Significant Bit (right-most bit)</div>\n        <div>＊ MSB - Most Significant Bit (left-most bit)</div>\n      </div>\n    </div>\n  );\n}\n\nexport default RamVisualization;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport pinsInfo from \"./pinsInfo.red\";\nimport memory from \"./memory.red\";\nimport visualizationSettings from \"./visualizationSettings.red\";\n\nexport default combineReducers({ memory, pinsInfo, visualizationSettings });\n","import { createStore } from \"redux\";\nimport { devToolsEnhancer } from \"redux-devtools-extension\";\nimport reducers from \"./redux/reducers\";\n\nconst configureStore = () => {\n  return createStore(reducers, devToolsEnhancer({}));\n};\n\nexport default configureStore();\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport RamVisualization from \"./components/RamVisualization\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./commonStyles/index.scss\";\n\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <RamVisualization />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}