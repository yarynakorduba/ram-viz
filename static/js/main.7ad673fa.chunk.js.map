{"version":3,"sources":["helpers/BEM.js","redux/actions/index.js","redux/reducers/memory.red.js","helpers/consts.js","redux/reducers/pinsInfo.red.js","hooks/reactRedux.hks.js","redux/reducers/visualizationSettings.red.js","hooks/index.js","components/ToggleButtons/ToggleButtons.js","components/Memory/Memory.js","hooks/htmlElements.hks.js","components/PinsBlock/PinsBlock.js","components/MemoryControls/DataControls.js","components/MemoryControls/AddressControls.js","components/MemoryControls/StateControls.js","components/MemoryControls/ClockControls.js","components/MemoryControls/MemoryControls.js","components/VisualizationSettings/VisualizationSettings.js","components/RamVisualization/RamVisualization.js","serviceWorker.js","redux/reducers/index.js","redux/sagas/index.js","store.js","index.js"],"names":["getBEMPAth","b","e","m","base","join","reduce","str","elementName","modifiers","Array","isArray","filter","Boolean","Object","entries","value","map","a","men","women","mars","venera","setPins","type","payload","setClockPin","setAddressRowInMemory","setAddressColumnInMemory","setSelectedAddressInMemory","setPinsTypeWidth","width","setIsPinNotationClassical","isClassical","setMemoryDisplayType","displayType","setIsTactingEnabled","isEnabled","setIsRasCasEnabled","setDatumInMemory","datum","address","setMemory","data","setTacts","numberOfTacts","setCurrentTacts","toggleRasCas","initialState","memoryArray","fill","isDirty","selectedAddress","undefined","row","col","memory","state","action","update","parseInt","selectMemory","path","selectSelectedAddress","selectSelectedRow","MEMORY_MODE","MEMORY_STATE","PINS","PIN_STATE","ON","OFF","repeat","pinsInfo","tacts","currentTacts","updatedValue","padStart","slice","selectAddress","selectData","selectDataWidth","selectAddressWidth","selectEnabled","selectMemoryState","selectClock","selectTacts","selectCurrentTacts","selectRas","selectCas","useAction","actionFn","dispatch","useDispatch","memedAct","useMemo","useCallback","apply","arguments","isPinsNotationClassical","isTactingEnabled","isRasCasEnabled","memoryDisplayType","visualizationSettings","selectIsPinNotationClassical","selectIsTactingEnabled","selectMemoryDisplayType","selectIsRasCasEnabled","useCellOrder","addressLength","useSelector","totalColumns","Math","pow","floor","cellIndex","column","totalRows","BEM","ToggleButtons","options","handleSelect","selectedValue","containerClassName","onSelect","className","label","console","log","onClick","viewOptions","Memory","setMemoryDisplayTypeAct","memorizedInfo","selectedRow","compose","take","length","selectedColumn","takeLast","ceil","addressWidth","dataLength","getCellOrder","cellWidth","cellHeight","containerWidth","containerHeight","widthForChar","cellY","cellX","textX","textY","cellMargin","colIndex","x","y","rowIndex","verticalOffset","fontSize","rowWidth","rowHeight","colWidth","colHeight","useMemoryCSSMeasures","getCellCoordinates","getColCoordinates","getRowCoordinates","headerHeight","style","minHeight","cell","selectedAddressStyles","dirtyAddressStyles","key","height","id","font-size","r","index","isRowSelected","isColSelected","PinsBlock","binaryData","setBinaryData","isDisabled","useState","split","binaryDataArray","setBinaryDataArray","classicalNotation","useEffect","pinWidth","crossedNotationYPosition","PIN_HEIGHT","pin","pinIndex","updatedPinValue","Number","updatedDataArray","includes","x1","y1","x2","y2","DataControls","memoryState","setPinsAct","setPinsWidthAct","name","min","max","defaultValue","onInput","ev","target","AddressControls","ras","cas","StateControls","enabled","setMemoryState","readWrite","setEnabled","ClockControls","clock","setTactsAct","toggleRasCasAct","setClockPinAct","resetClockTimeout","useRef","current","setTimeout","clearTimeout","useTacting","handleClock","onChange","pinNotationOptions","MemoryControls","setIsPinNotationClassicalAct","isPinNotationClassical","setMemoryAct","dataWidth","memoryCell","useControlMemorySize","useControlMemoryDatumWidth","setSelectedAddressInMemoryAct","setSelectedRowInMemoryAct","setSelectedColInMemoryAct","setDatumInMemoryAct","selectedAddressInMemory","setDatum","useReadWriteMemoryDatum","VisualizationSettings","setIsTactingEnabledAct","setCurrentTactsAct","setIsRasCasEnabledAct","checked","RamVisualization","window","location","hostname","match","combineReducers","resetAddressRowAndCol","enableRasCasPins","onSetTacting","constructSelectedMemoryAddress","updateNumberOfTacts","rootSaga","put","select","ramLatency","selectedCol","isEmpty","all","takeEvery","sagaMiddleware","createSagaMiddleware","composeEnhancers","composeWithDevTools","configureStore","store","createStore","reducers","applyMiddleware","run","sagas","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ad673fa.chunk.js","sourcesContent":["// Author: neformal13 https://gist.github.com/neformal13/00ac31d02eedf669768bd106482d2d3c\ntype Modifier = any[] | Record<string, any>;\ntype B = (b: string) => (elementName?: string | Modifier, modifiers?: Modifier) => string;\ntype GetBEMPAth = (b: string, e: string, m: string[]) => string;\n\nconst ELEMENT_SEPARATOR = \"__\";\nconst MODIFIER_SEPARATOR = \"_\";\n\nconst getBEMPAth: GetBEMPAth = (b, e, m) => {\n  const base = e !== \"\" ? [b, e].join(ELEMENT_SEPARATOR) : b;\n\n  return `${base} ${m.reduce((str, m) => `${str} ${base}${MODIFIER_SEPARATOR}${m}`, \"\")}`;\n};\n\nconst b: B = (b) => (elementName, modifiers = []) => {\n  modifiers = typeof elementName === \"string\" ? modifiers : elementName || [];\n\n  return getBEMPAth(\n    b,\n    typeof elementName === \"string\" ? elementName : \"\",\n    Array.isArray(modifiers)\n      ? modifiers.filter(Boolean)\n      : Object.entries(modifiers)\n          .filter(([, value]) => Boolean(value))\n          .map(([key]) => key)\n  );\n};\n\nexport default b;\n\n// Tests\nconst a = b(\"Hello\"); /*?*/\na(); /*?*/\na([\"men\", \"women\"]); /*?*/\na({ men: true, women: false }); /*?*/\na(\"world\"); /*?*/\na(\"world\", [\"mars\", \"venera\"]); /*?*/\na(\"world\", { mars: true, venera: false }); /*?*/\n","export const SET_PINS_WIDTH = \"SET_PINS_WIDTH\";\nexport const SET_PINS = \"SET_PINS\";\n\nexport const SET_CLOCK_PIN = \"SET_CLOCK_PIN\";\n\n// These actions are use for RAS / CAS mode,\n// when row and column address are set separately\nexport const SET_ADDRESS_ROW = \"SET_ADDRESS_ROW\";\nexport const SET_ADDRESS_COLUMN = \"SET_ADDRESS_COLUMN\";\n\nexport const SET_MEMORY = \"SET_MEMORY\";\nexport const SET_TACTS = \"SET_TACTS\";\nexport const SET_CURRENT_TACTS = \"SET_CURRENT_TACTS\";\n\nexport const TOGGLE_RAS_CAS = \"TOGGLE_RAS_CAS\";\n\nexport const WRITE_DATUM_IN_MEMORY = \"WRITE_DATUM_IN_MEMORY\";\nexport const READ_DATUM_FROM_MEMORY = \"READ_DATUM_FROM_MEMORY\";\n\nexport const SET_IS_PIN_NOTATION_CLASSICAL = \"SET_IS_PIN_NOTATION_CLASSICAL\";\nexport const SET_IS_TACTING_ENABLED = \"SET_IS_TACTING_ENABLED\";\nexport const SET_IS_RAS_CAS_ENABLED = \"SET_IS_RAS_CAS_ENABLED\";\nexport const SET_MEMORY_DISPLAY_TYPE = \"SET_MEMORY_DISPLAY_TYPE\";\n\nexport const SET_SELECTED_ROW_IN_MEMORY = \"SET_SELECTED_ROW_IN_MEMORY\";\nexport const SET_SELECTED_COL_IN_MEMORY = \"SET_SELECTED_COL_IN_MEMORY\";\nexport const SET_SELECTED_ADDRESS_IN_MEMORY = \"SET_SELECTED_ADDRESS_IN_MEMORY\";\n\nexport const setPins = (type, value) => ({ type: SET_PINS, payload: { type, value } });\n\nexport const setClockPin = (value) => ({ type: SET_CLOCK_PIN, payload: value });\n\nexport const setRas = (value) => ({ type: SET_ADDRESS_ROW, payload: value });\nexport const setCas = (value) => ({ type: SET_ADDRESS_COLUMN, payload: value });\n\nexport const setAddressRowInMemory = (value) => ({ type: SET_SELECTED_ROW_IN_MEMORY, payload: value });\nexport const setAddressColumnInMemory = (value) => ({ type: SET_SELECTED_COL_IN_MEMORY, payload: value });\nexport const setSelectedAddressInMemory = (value) => ({ type: SET_SELECTED_ADDRESS_IN_MEMORY, payload: value });\n\nexport const setPinsTypeWidth = (type, width) => ({ type: SET_PINS_WIDTH, payload: { type, width } });\n\nexport const setIsPinNotationClassical = (isClassical) => ({\n  type: SET_IS_PIN_NOTATION_CLASSICAL,\n  payload: { isClassical },\n});\n\nexport const setMemoryDisplayType = (displayType) => ({\n  type: SET_MEMORY_DISPLAY_TYPE,\n  payload: { displayType },\n});\n\nexport const setIsTactingEnabled = (isEnabled) => ({\n  type: SET_IS_TACTING_ENABLED,\n  payload: { isEnabled },\n});\n\nexport const setIsRasCasEnabled = (isEnabled) => ({\n  type: SET_IS_RAS_CAS_ENABLED,\n  payload: { isEnabled },\n});\n\nexport const setDatumInMemory = (datum, address) => ({\n  type: WRITE_DATUM_IN_MEMORY,\n  payload: {\n    datum,\n    address,\n  },\n});\n\nexport const setMemory = (data) => {\n  return {\n    type: SET_MEMORY,\n    payload: {\n      data,\n    },\n  };\n};\n\nexport const setTacts = (numberOfTacts) => ({ type: SET_TACTS, payload: numberOfTacts });\nexport const setCurrentTacts = (numberOfTacts) => ({ type: SET_CURRENT_TACTS, payload: numberOfTacts });\n\nexport const toggleRasCas = () => ({ type: TOGGLE_RAS_CAS });\n","import {\n  SET_MEMORY,\n  WRITE_DATUM_IN_MEMORY,\n  SET_SELECTED_ADDRESS_IN_MEMORY,\n  SET_SELECTED_ROW_IN_MEMORY,\n  SET_SELECTED_COL_IN_MEMORY,\n} from \"../actions\";\nimport { path, update } from \"ramda\";\n\nconst initialState = {\n  memoryArray: new Array(16).fill({ datum: \"0000\", isDirty: false }),\n  selectedAddress: { address: undefined, row: undefined, col: undefined },\n};\n\nconst memory = (state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case SET_SELECTED_ADDRESS_IN_MEMORY: {\n      return {\n        ...state,\n        selectedAddress: { ...state.selectedAddress, address: payload },\n      };\n    }\n    case SET_SELECTED_ROW_IN_MEMORY: {\n      return {\n        ...state,\n        selectedAddress: { ...state.selectedAddress, row: payload },\n      };\n    }\n    case SET_SELECTED_COL_IN_MEMORY: {\n      return {\n        ...state,\n        selectedAddress: { ...state.selectedAddress, col: payload },\n      };\n    }\n    case WRITE_DATUM_IN_MEMORY: {\n      const { address, datum } = payload;\n      return {\n        ...state,\n        memoryArray: update(parseInt(address, 2), { datum, isDirty: true })(state.memoryArray),\n      };\n    }\n    case SET_MEMORY: {\n      return { ...state, memoryArray: payload.data };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default memory;\n\nexport const selectMemory = (state) => path([\"memory\", \"memoryArray\"], state);\n\nexport const selectSelectedAddress = (state) => path([\"memory\", \"selectedAddress\", \"address\"], state);\nexport const selectSelectedRow = (state) => path([\"memory\", \"selectedAddress\", \"row\"], state);\nexport const selectSelectedColumn = (state) => path([\"memory\", \"selectedAddress\", \"col\"], state);\n","export const MEMORY_MODE = {\n  READ: \"1\",\n  WRITE: \"0\",\n};\n\nexport const MEMORY_STATE = {\n  ENABLED: \"1\",\n  DISABLED: \"0\",\n};\n\nexport const PINS = {\n  RAS: \"RAS\",\n  CAS: \"CAS\",\n  CLOCK: \"clock\",\n  DATA: \"data\",\n  ADDRESS: \"address\",\n  ENABLED: \"enabled\",\n  READ_WRITE: \"readWrite\",\n};\n\nexport const PIN_STATE = {\n  ON: \"1\",\n  OFF: \"0\",\n};\n","import { path, take, takeLast, compose } from \"ramda\";\nimport {\n  SET_PINS,\n  SET_PINS_WIDTH,\n  SET_TACTS,\n  SET_CURRENT_TACTS,\n  SET_ADDRESS_ROW,\n  SET_ADDRESS_COLUMN,\n  TOGGLE_RAS_CAS,\n  SET_CLOCK_PIN,\n} from \"../actions\";\nimport { MEMORY_MODE, MEMORY_STATE, PIN_STATE, PINS } from \"../../helpers/consts\";\n\nconst initialState = {\n  address: PIN_STATE.OFF.repeat(4),\n  [PINS.RAS]: PIN_STATE.OFF,\n  [PINS.CAS]: PIN_STATE.OFF,\n  addressWidth: 4,\n  data: PIN_STATE.OFF.repeat(4),\n  dataWidth: 4,\n  enabled: MEMORY_STATE.ENABLED,\n  readWrite: MEMORY_MODE.WRITE,\n  clock: PIN_STATE.OFF,\n  tacts: 4,\n  currentTacts: 0,\n};\n\nconst pinsInfo = (state = initialState, action) => {\n  const { payload } = action;\n  switch (action.type) {\n    case SET_ADDRESS_ROW:\n      return {\n        ...state,\n        [PINS.RAS]: payload,\n      };\n    case SET_ADDRESS_COLUMN:\n      return {\n        ...state,\n        [PINS.CAS]: payload,\n      };\n\n    case SET_CLOCK_PIN:\n      return {\n        ...state,\n        [PINS.CLOCK]: payload,\n      };\n\n    case SET_PINS:\n      return { ...state, [payload.type]: payload.value };\n\n    case TOGGLE_RAS_CAS: {\n      return {\n        ...state,\n        [PINS.RAS]: state[PINS.RAS] === PIN_STATE.ON ? PIN_STATE.OFF : PIN_STATE.ON,\n        [PINS.CAS]: state[PINS.CAS] === PIN_STATE.ON ? PIN_STATE.OFF : PIN_STATE.ON,\n      };\n    }\n    case SET_TACTS:\n      return { ...state, tacts: payload.tacts, currentTacts: payload };\n\n    case SET_CURRENT_TACTS:\n      return { ...state, currentTacts: payload };\n\n    case SET_PINS_WIDTH: {\n      const { type, width } = payload;\n      const updatedValue = state[type].padStart(width, \"0\").slice(-width);\n      return {\n        ...state,\n        [type]: updatedValue,\n        [`${type}Width`]: width,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default pinsInfo;\n\nexport const selectAddress = (state) => path([\"pinsInfo\", \"address\"], state);\nexport const selectData = (state) => path([\"pinsInfo\", \"data\"], state);\nexport const selectDataWidth = (state) => path([\"pinsInfo\", \"dataWidth\"], state);\nexport const selectAddressWidth = (state) => path([\"pinsInfo\", \"addressWidth\"], state);\nexport const selectEnabled = (state) => path([\"pinsInfo\", \"enabled\"], state);\nexport const selectMemoryState = (state) => path([\"pinsInfo\", \"readWrite\"], state);\nexport const selectClock = (state) => path([\"pinsInfo\", \"clock\"], state);\nexport const selectTacts = (state) => path([\"pinsInfo\", \"tacts\"], state);\nexport const selectCurrentTacts = (state) => path([\"pinsInfo\", \"currentTacts\"], state);\n\nexport const selectRas = (state) => path([\"pinsInfo\", PINS.RAS], state);\nexport const selectCas = (state) => path([\"pinsInfo\", PINS.CAS], state);\n\nexport const selectAddressRow = (isRasCasEnabled) => (state) => {\n  // if (isRasCasEnabled) return path([\"pinsInfo\", \"ras\"], state);\n  return compose((address) => take(Math.floor(address.length / 2), address), path([\"pinsInfo\", \"address\"]))(state);\n};\n\nexport const selectAddressColumn = (isRasCasEnabled) => (state) => {\n  // if (isRasCasEnabled) return path([\"pinsInfo\", \"cas\"], state);\n  return compose((address) => takeLast(Math.ceil(address.length / 2), address), path([\"pinsInfo\", \"address\"]))(state);\n};\n","import { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useMemo } from \"react\";\n\nexport const useAction = (actionFn) => {\n  const dispatch = useDispatch();\n  const memedAct = useMemo(() => actionFn, [actionFn]);\n  return useCallback(\n    function callback() {\n      dispatch(memedAct.apply(null, arguments));\n    },\n    [dispatch, memedAct]\n  );\n};\n","import {\n  SET_IS_PIN_NOTATION_CLASSICAL,\n  SET_IS_TACTING_ENABLED,\n  SET_MEMORY_DISPLAY_TYPE,\n  SET_IS_RAS_CAS_ENABLED,\n} from \"../actions\";\nimport { path } from \"ramda\";\n\nconst initialState = {\n  isPinsNotationClassical: false,\n  isTactingEnabled: false,\n  isRasCasEnabled: false,\n  memoryDisplayType: \"matrix\",\n};\n\nconst visualizationSettings = (state = initialState, action) => {\n  const { payload, type } = action;\n  switch (type) {\n    case SET_IS_PIN_NOTATION_CLASSICAL:\n      return {\n        ...state,\n        isPinsNotationClassical: payload.isClassical,\n      };\n    case SET_IS_TACTING_ENABLED:\n      return {\n        ...state,\n        isTactingEnabled: payload.isEnabled,\n        isRasCasEnabled: payload.isEnabled ? state.isRasCasEnabled : false,\n      };\n    case SET_IS_RAS_CAS_ENABLED:\n      return {\n        ...state,\n        isTactingEnabled: payload.isEnabled ? payload.isEnabled : state.isTactingEnabled,\n        isRasCasEnabled: payload.isEnabled,\n      };\n    case SET_MEMORY_DISPLAY_TYPE:\n      return {\n        ...state,\n        memoryDisplayType: payload.displayType,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default visualizationSettings;\n\nexport const selectIsPinNotationClassical = (state) =>\n  path([\"visualizationSettings\", \"isPinsNotationClassical\"], state);\n\nexport const selectIsTactingEnabled = (state) => path([\"visualizationSettings\", \"isTactingEnabled\"], state);\n\nexport const selectMemoryDisplayType = (state) => path([\"visualizationSettings\", \"memoryDisplayType\"], state);\n\nexport const selectIsRasCasEnabled = (state) => path([\"visualizationSettings\", \"isRasCasEnabled\"], state);\n","import { useAction } from \"./reactRedux.hks\";\nimport {\n  setMemory,\n  setPins,\n  setDatumInMemory,\n  toggleRasCas,\n  setSelectedAddressInMemory,\n  setAddressColumnInMemory,\n  setAddressRowInMemory,\n  setClockPin,\n} from \"../redux/actions\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectDataWidth,\n  selectAddressWidth,\n  selectAddress,\n  selectEnabled,\n  selectData,\n  selectMemoryState,\n  selectCurrentTacts,\n  selectClock,\n  selectRas,\n} from \"../redux/reducers/pinsInfo.red\";\nimport { selectMemory, selectSelectedAddress } from \"../redux/reducers/memory.red\";\nimport { useEffect } from \"react\";\nimport { compose } from \"redux\";\nimport { map, take, takeLast } from \"ramda\";\nimport { MEMORY_STATE, MEMORY_MODE, PINS, PIN_STATE } from \"../helpers/consts\";\nimport { selectIsRasCasEnabled } from \"../redux/reducers/visualizationSettings.red\";\nimport { useRef } from \"react\";\n\nexport const useControlMemorySize = () => {\n  const setMemoryAct = useAction(setMemory);\n\n  const dataWidth = useSelector(selectDataWidth);\n  const addressWidth = useSelector(selectAddressWidth);\n  const memorizedInfo = useSelector(selectMemory);\n\n  useEffect(() => {\n    if (addressWidth) {\n      compose(\n        setMemoryAct,\n        (memory) => memory.map((memoryCell, index) => memorizedInfo[index] || memoryCell),\n        (memory) =>\n          memory.fill({\n            isDirty: false,\n            datum: PIN_STATE.OFF.repeat(dataWidth),\n          })\n      )(new Array(Math.pow(2, addressWidth)));\n    }\n  }, [addressWidth, dataWidth, setMemoryAct]);\n};\n\n// This hook determines cell row and column order in matrix view\nexport const useCellOrder = () => {\n  const addressLength = useSelector(selectAddressWidth);\n  const getCellOrder = (cellIndex) => ({\n    column: cellIndex % Math.pow(2, Math.floor(addressLength / 2)),\n    row: Math.floor(cellIndex / Math.pow(2, Math.floor(addressLength / 2))),\n  });\n\n  const totalColumns = Math.pow(2, Math.floor(addressLength / 2));\n  const totalRows = Math.floor(Math.pow(2, addressLength) / Math.pow(2, Math.floor(addressLength / 2)));\n  return [getCellOrder, { totalRows, totalColumns }];\n};\n// --\n\n// ---\n\n// This hook controlls memory datum width\n// Add adds zeros from the left to the datum, in case data width was increased\nexport const useControlMemoryDatumWidth = () => {\n  const setMemoryAct = useAction(setMemory);\n  const dataWidth = useSelector(selectDataWidth);\n  const memorizedInfo = useSelector(selectMemory);\n\n  useEffect(() => {\n    compose(\n      setMemoryAct,\n      map((cell) => ({\n        ...cell,\n        datum: cell.datum.padStart(dataWidth, PIN_STATE.OFF).slice(-dataWidth),\n      }))\n    )(memorizedInfo);\n  }, [dataWidth, setMemoryAct]);\n};\n\nexport const useTacting = () => {\n  const toggleRasCasAct = useAction(toggleRasCas);\n  // const setCurrentTactsAct = useAction(setCurrentTacts);\n  const setClockPinAct = useAction(setClockPin);\n  const clock = useSelector(selectClock);\n  const currentTacts = useSelector(selectCurrentTacts);\n\n  // reset clock pin to 0 state after a small timeout\n  const resetClockTimeout = useRef(null);\n  useEffect(() => {\n    if (clock === PIN_STATE.ON) {\n      resetClockTimeout.current = setTimeout(() => {\n        setClockPinAct(PIN_STATE.OFF);\n      }, 500);\n    }\n    return () => clearTimeout(resetClockTimeout.current);\n  }, [clock, currentTacts, setClockPinAct, toggleRasCasAct]);\n\n  const handleSetClock = () => {\n    if (currentTacts > 0) {\n      setClockPinAct(PIN_STATE.ON);\n    }\n  };\n\n  return [handleSetClock];\n};\n\nexport const useReadWriteMemoryDatum = () => {\n  const setPinsAct = useAction(setPins);\n  const setSelectedAddressInMemoryAct = useAction(setSelectedAddressInMemory);\n  const setSelectedRowInMemoryAct = useAction(setAddressRowInMemory);\n  const setSelectedColInMemoryAct = useAction(setAddressColumnInMemory);\n  const memorizedInfo = useSelector(selectMemory);\n  const setDatumInMemoryAct = useAction(setDatumInMemory);\n  const address = useSelector(selectAddress);\n  const addressWidth = useSelector(selectAddressWidth);\n  const dataWidth = useSelector(selectDataWidth);\n  const selectedAddressInMemory = useSelector(selectSelectedAddress);\n  const enabled = useSelector(selectEnabled);\n  const datum = useSelector(selectData);\n  const memoryState = useSelector(selectMemoryState);\n  const currentTacts = useSelector(selectCurrentTacts);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n  const ras = useSelector(selectRas);\n\n  const setDatum = (datum) => setPinsAct(PINS.DATA, datum);\n\n  useEffect(() => {\n    if (memoryState && currentTacts !== 0) {\n      setDatum(PIN_STATE.OFF.repeat(dataWidth));\n    }\n  }, [memoryState]);\n\n  // update datum in memory if address is already selected\n  useEffect(() => {\n    if (selectedAddressInMemory) {\n      if (memoryState === MEMORY_MODE.WRITE) {\n        setDatumInMemoryAct(datum, selectedAddressInMemory);\n        setSelectedAddressInMemoryAct(\"\");\n      }\n    }\n  }, [selectedAddressInMemory, datum, setDatumInMemoryAct, setSelectedColInMemoryAct, setSelectedRowInMemoryAct]);\n\n  // update datum in memory if address is already selected\n  useEffect(() => {\n    if (selectedAddressInMemory) {\n      if (memoryState === MEMORY_MODE.READ) {\n        setDatum(memorizedInfo[parseInt(address, 2)].datum);\n        setSelectedAddressInMemoryAct(\"\");\n      }\n    }\n  }, [memoryState, memorizedInfo, address, selectedAddressInMemory, datum]);\n\n  // set selected address in memory\n  useEffect(() => {\n    if (enabled === MEMORY_STATE.ENABLED && currentTacts === 0) {\n      if (!isRasCasEnabled) {\n        if (memoryState === MEMORY_MODE.WRITE) {\n          setSelectedAddressInMemoryAct(address);\n        } else {\n          setDatum(memorizedInfo[parseInt(address, 2)].datum);\n        }\n      } else {\n        if (ras === PIN_STATE.ON) {\n          setSelectedRowInMemoryAct(take(Math.ceil(addressWidth / 2), address));\n        } else {\n          setSelectedColInMemoryAct(takeLast(Math.floor(addressWidth / 2), address));\n        }\n      }\n    }\n  }, [enabled, memoryState, address, datum, currentTacts, addressWidth, setDatumInMemoryAct]);\n};\n","import React from \"react\";\nimport { map } from \"ramda\";\nimport BEM from \"../../helpers/BEM\";\n\nimport \"./ToggleButtons.scss\";\n\nconst b = BEM(\"ToggleButtons\");\n\nconst ToggleButtons = ({\n  options,\n  handleSelect = () => {\n    /* noop */\n  },\n  selectedValue,\n  containerClassName,\n}) => {\n  const onSelect = (value) => () => handleSelect(value);\n\n  return (\n    <div className={`${b()} ${containerClassName}`}>\n      {map(\n        ({ value, label }) =>\n          console.log(selectedValue, value) || (\n            <button className={b(\"option\", [selectedValue === value && \"selected\"])} onClick={onSelect(value)}>\n              {label}\n            </button>\n          ),\n        options\n      )}\n    </div>\n  );\n};\n\nexport default ToggleButtons;\n","import React from \"react\";\nimport BEM from \"../../helpers/BEM\";\n\nimport \"./Memory.scss\";\nimport { useSelector } from \"react-redux\";\nimport { selectMemory } from \"../../redux/reducers/memory.red\";\nimport {\n  selectAddress,\n  selectAddressRow,\n  selectAddressColumn,\n  selectAddressWidth,\n} from \"../../redux/reducers/pinsInfo.red\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\n\nimport { setMemoryDisplayType } from \"../../redux/actions\";\nimport { selectMemoryDisplayType, selectIsRasCasEnabled } from \"../../redux/reducers/visualizationSettings.red\";\nimport { useCellOrder } from \"../../hooks\";\nimport { useMemoryCSSMeasures } from \"../../hooks/htmlElements.hks\";\nimport ToggleButtons from \"../ToggleButtons\";\n\nconst b = BEM(\"Memory\");\n\nconst viewOptions = [\n  { value: \"table\", label: \"Table View\" },\n  { value: \"matrix\", label: \"Matrix View\" },\n];\n\nconst Memory = () => {\n  const setMemoryDisplayTypeAct = useAction(setMemoryDisplayType);\n\n  const memorizedInfo = useSelector(selectMemory);\n  const displayType = useSelector(selectMemoryDisplayType);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n  const selectedAddress = useSelector(selectAddress);\n  const selectedRow = useSelector(selectAddressRow(isRasCasEnabled));\n  const selectedColumn = useSelector(selectAddressColumn(isRasCasEnabled));\n  const addressWidth = useSelector(selectAddressWidth);\n  const memoryDisplayType = useSelector(selectMemoryDisplayType);\n\n  const [\n    getCellCoordinates,\n    getColCoordinates,\n    getRowCoordinates,\n    { cellWidth, cellHeight, cellMargin, verticalOffset: headerHeight, containerWidth, containerHeight, fontSize },\n    { rowWidth, rowHeight },\n    { colWidth, colHeight },\n  ] = useMemoryCSSMeasures();\n\n  const [, { totalRows, totalColumns }] = useCellOrder();\n\n  return (\n    <div className={b()}>\n      <ToggleButtons\n        containerClassName={b(\"viewOptions\")}\n        options={viewOptions}\n        selectedValue={memoryDisplayType}\n        handleSelect={setMemoryDisplayTypeAct}\n      />\n      <svg x={0} y={0} style={{ minHeight: containerHeight, width: containerWidth }}>\n        <g>\n          <g>\n            <text className={b(\"header\")} x={cellWidth - cellMargin} y={headerHeight / 2}>\n              Address\n            </text>\n            <text className={b(\"header\")} x={cellWidth * 2} y={headerHeight / 2}>\n              Data\n            </text>\n          </g>\n          {memorizedInfo.map((cell, cellIndex) => {\n            const { cellX, cellY, textX, textY } = getCellCoordinates(cellIndex);\n\n            const selectedAddressStyles =\n              parseInt(selectedAddress, 2) === cellIndex && selectedAddress.length === addressWidth ? \"selected\" : \"\";\n            const dirtyAddressStyles = cell.isDirty ? \"dirty\" : \"\";\n\n            return (\n              <g key={cellIndex}>\n                {displayType === \"table\" && (\n                  <g>\n                    <rect\n                      x={0}\n                      y={cellY}\n                      width={cellWidth}\n                      height={cellHeight}\n                      className={b(\"cellAddress\", [selectedAddressStyles, dirtyAddressStyles])}\n                    ></rect>\n                    <text\n                      className={b(\"addressLabel\")}\n                      x={cellX - cellMargin}\n                      y={cellY + (cellHeight + cellMargin) / 2}\n                    >\n                      {cellIndex}\n                    </text>\n                  </g>\n                )}\n                <g id={cellIndex}>\n                  <rect\n                    x={cellX}\n                    y={cellY}\n                    width={cellWidth}\n                    height={cellHeight}\n                    className={b(\"cell\", [selectedAddressStyles, dirtyAddressStyles])}\n                  ></rect>\n                  <text className={b(\"dataLabel\")} x={textX} y={textY} font-size={`${fontSize}px`}>\n                    {cell.datum}\n                  </text>\n                </g>\n              </g>\n            );\n          })}\n          {new Array(totalRows).fill(\"\").map((r, index) => {\n            const { x, y } = getRowCoordinates(index);\n            const isRowSelected = displayType === \"matrix\" && index === parseInt(selectedRow, 2);\n            return (\n              <rect\n                x={x}\n                y={y}\n                width={rowWidth}\n                height={rowHeight}\n                className={b(\"row\", [isRowSelected && \"selected\"])}\n              />\n            );\n          })}\n          {new Array(totalColumns).fill(\"\").map((r, index) => {\n            const { x, y } = getColCoordinates(index);\n            const isColSelected = displayType === \"matrix\" && index === parseInt(selectedColumn, 2);\n\n            return (\n              <rect\n                x={x}\n                y={y}\n                width={colWidth}\n                height={colHeight}\n                className={b(\"column\", [isColSelected && \"selected\"])}\n              />\n            );\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport default Memory;\n","import { useSelector } from \"react-redux\";\nimport { selectMemoryDisplayType } from \"../redux/reducers/visualizationSettings.red\";\nimport { selectAddressWidth, selectDataWidth } from \"../redux/reducers/pinsInfo.red\";\nimport { useCellOrder } from \".\";\n\n// This hook encapsulates the calculation of cell position in table / matrix view\nexport const useMemoryCSSMeasures = () => {\n  const displayType = useSelector(selectMemoryDisplayType);\n  const addressLength = useSelector(selectAddressWidth);\n  const dataLength = useSelector(selectDataWidth);\n\n  const [getCellOrder] = useCellOrder();\n\n  // vertical offset is needed to leave some place for header\n  const verticalOffset = 22;\n  const cellWidth = displayType === \"table\" ? 100 : 70;\n  const cellMargin = 2;\n  const cellHeight = displayType === \"table\" ? 20 : 33;\n\n  const containerWidth =\n    displayType === \"table\"\n      ? cellWidth * 2 + cellMargin\n      : (cellWidth + cellMargin) * Math.pow(2, Math.floor(addressLength / 2));\n  const containerHeight =\n    displayType === \"table\"\n      ? verticalOffset + Math.pow(2, addressLength) * (cellHeight + cellMargin)\n      : verticalOffset + Math.pow(2, Math.ceil(addressLength / 2)) * (cellHeight + cellMargin);\n\n  const getCellPosition = (cellIndex) => {\n    if (displayType === \"table\") {\n      const cellY = verticalOffset + cellIndex * (cellHeight + cellMargin);\n      return {\n        cellX: cellWidth + cellMargin,\n        cellY,\n        textX: 2 * cellWidth,\n        textY: cellY + (cellHeight + cellMargin) / 2,\n      };\n    }\n    const { row, column } = getCellOrder(cellIndex);\n    return {\n      cellX: column * (cellWidth + cellMargin),\n      cellY: row * (cellHeight + cellMargin),\n      textX: column * (cellWidth + cellMargin) + cellWidth - cellMargin * 2,\n      textY: row * (cellHeight + cellMargin) + (cellHeight + cellMargin) / 2,\n    };\n  };\n\n  const getRowPosition = (rowIndex) => ({ x: 0, y: rowIndex * (cellHeight + cellMargin) });\n  const getColPosition = (colIndex) => ({ x: colIndex * (cellWidth + cellMargin), y: 0 });\n  const widthForChar = cellWidth / dataLength;\n  const MIN_FONT_SIZE = 13;\n  const MAX_FONT_SIZE = 20;\n\n  return [\n    getCellPosition,\n    getColPosition,\n    getRowPosition,\n    {\n      cellWidth,\n      cellHeight,\n      cellMargin,\n      verticalOffset,\n      containerWidth,\n      containerHeight,\n      fontSize:\n        widthForChar > MAX_FONT_SIZE\n          ? MAX_FONT_SIZE\n          : widthForChar < MIN_FONT_SIZE\n          ? MIN_FONT_SIZE\n          : cellWidth / dataLength,\n    },\n    { rowWidth: containerWidth - cellMargin, rowHeight: cellHeight },\n    { colWidth: cellWidth, colHeight: containerHeight - verticalOffset - cellMargin },\n  ];\n};\n","import React, { useState, useEffect } from \"react\";\nimport { update, includes } from \"ramda\";\nimport BEM from \"../../helpers/BEM\";\n\nimport { useSelector } from \"react-redux\";\nimport { selectIsPinNotationClassical } from \"../../redux/reducers/visualizationSettings.red\";\n\nimport \"./PinsBlock.scss\";\nimport { PIN_STATE } from \"../../helpers/consts\";\n\nconst b = BEM(\"PinsBlock\");\n\nconst PIN_HEIGHT = 20;\nconst PIN_LABEL_MARGIN = 3;\n\nconst PinsBlock = ({ binaryData, setBinaryData, isDisabled = false }) => {\n  const [binaryDataArray, setBinaryDataArray] = useState(`${binaryData}`.split(\"\"));\n  const classicalNotation = useSelector(selectIsPinNotationClassical);\n\n  useEffect(() => {\n    if (binaryData) setBinaryDataArray(`${binaryData}`.split(\"\"));\n  }, [binaryData]);\n\n  const handleDataPinClick = (pinIndex) => () => {\n    if (isDisabled) return;\n    if (setBinaryData) {\n      const updatedPinValue = Number(binaryDataArray[pinIndex]) === 0 ? PIN_STATE.ON : PIN_STATE.OFF;\n      const updatedDataArray = update(pinIndex, updatedPinValue, binaryDataArray);\n      setBinaryDataArray(updatedDataArray);\n      setBinaryData(updatedDataArray.join(\"\"));\n    }\n  };\n  const defaultPinWidth = 125;\n  const pinWidth = classicalNotation ? 25 : defaultPinWidth;\n  const crossedNotationYPosition = (binaryDataArray.length * PIN_HEIGHT) / 2 + PIN_HEIGHT / 2;\n  return (\n    <div className={b()}>\n      <svg className={b(\"list\")} width={defaultPinWidth} height={(binaryDataArray.length + 1) * PIN_HEIGHT}>\n        {binaryDataArray.map((pin, id) => {\n          return (\n            <g key={id} onClick={handleDataPinClick(id)}>\n              {binaryDataArray.length > 1 && includes(id, [0, binaryDataArray.length - 1]) && (\n                <text x=\"0\" y={id * PIN_HEIGHT + PIN_HEIGHT - PIN_LABEL_MARGIN} className={b(\"pinSignificance\")}>\n                  {id === 0 ? \"MSB\" : \"LSB\"}\n                </text>\n              )}\n              <text\n                x={0}\n                y={id * PIN_HEIGHT + PIN_HEIGHT - PIN_LABEL_MARGIN}\n                className={b(\"pinLabel\", [pin === PIN_STATE.ON && \"selected\", isDisabled && \"disabled\"])}\n              >\n                {pin}\n              </text>\n              <rect x={0} y={id * PIN_HEIGHT} height={PIN_HEIGHT} width={pinWidth} className={b(\"pinArea\")} />\n              <line\n                x1={0}\n                y1={id * PIN_HEIGHT + PIN_HEIGHT}\n                x2={defaultPinWidth}\n                y2={id * PIN_HEIGHT + PIN_HEIGHT}\n                className={b(\"pin\", [classicalNotation ? \"short\" : \"long\"])}\n              />\n            </g>\n          );\n        })}\n        <line\n          x1={pinWidth}\n          y1={PIN_HEIGHT}\n          x2={pinWidth}\n          y2={binaryDataArray.length * PIN_HEIGHT}\n          className={b(\"pinsDivider\", [classicalNotation ? \"visible\" : \"invisible\"])}\n        />\n        <text\n          x={64}\n          y={crossedNotationYPosition - PIN_LABEL_MARGIN}\n          className={b(\"pinsNumber\", [classicalNotation ? \"visible\" : \"invisible\"])}\n        >\n          {binaryDataArray.length}\n        </text>\n        <line\n          x1={classicalNotation ? 70 : defaultPinWidth}\n          y1={crossedNotationYPosition + 1}\n          x2={classicalNotation ? 90 : defaultPinWidth}\n          y2={crossedNotationYPosition + 1}\n          className={b(\"crossNotation\", [classicalNotation ? \"visible\" : \"invisible\"])}\n        />\n        <line\n          x1={pinWidth}\n          y1={crossedNotationYPosition}\n          x2={defaultPinWidth}\n          y2={crossedNotationYPosition}\n          className={b(\"pinsNotation\", [classicalNotation ? \"visible\" : \"invisible\"])}\n        />\n      </svg>\n    </div>\n  );\n};\n\nexport default PinsBlock;\n","import React from \"react\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setPinsTypeWidth, setPins } from \"../../redux/actions\";\nimport { useSelector } from \"react-redux\";\nimport { selectData, selectDataWidth, selectMemoryState } from \"../../redux/reducers/pinsInfo.red\";\nimport { MEMORY_MODE, PINS } from \"../../helpers/consts\";\nimport BEM from \"../../helpers/BEM\";\nimport Pins from \"../PinsBlock\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst DataControls = () => {\n  const memoryState = useSelector(selectMemoryState);\n  const datum = useSelector(selectData);\n\n  const setPinsAct = useAction(setPins);\n  const setPinsWidthAct = useAction(setPinsTypeWidth);\n\n  const setDataLength = (width) => setPinsWidthAct(PINS.DATA, width);\n  const setDatum = (datum) => setPinsAct(PINS.DATA, datum);\n\n  const dataLength = useSelector(selectDataWidth);\n\n  const handleInputDataLength = (ev) => setDataLength(+ev.target.value);\n\n  return (\n    <div className={b(\"dataBlock\")}>\n      <label className={b(\"dataLabel\")}>\n        <div className={b(\"dataMode\")}>\n          <span className={b(\"dataModeLabel\")}>{memoryState === MEMORY_MODE.WRITE ? \"Input: \" : \"Output: \"}</span>\n          <span>\n            {datum} ({parseInt(datum, 2)})\n          </span>\n        </div>\n        <div className={b(\"bitsWidth\")}>width: {dataLength} bits</div>\n        <input\n          name=\"dataLength\"\n          type=\"range\"\n          min={1}\n          max={8}\n          defaultValue={dataLength}\n          onInput={handleInputDataLength}\n        />\n      </label>\n      <Pins binaryData={datum} setBinaryData={setDatum} isDisabled={memoryState === MEMORY_MODE.READ} />\n    </div>\n  );\n};\n\nexport default DataControls;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setPinsTypeWidth, setPins } from \"../../redux/actions\";\nimport { selectAddress, selectAddressWidth, selectRas, selectCas } from \"../../redux/reducers/pinsInfo.red\";\n\nimport BEM from \"../../helpers/BEM\";\n\nimport Pins from \"../PinsBlock\";\nimport { selectIsRasCasEnabled } from \"../../redux/reducers/visualizationSettings.red\";\nimport { PINS, PIN_STATE } from \"../../helpers/consts\";\n\nconst b = BEM(\"MemoryControls\");\n\nexport const AddressControls = () => {\n  const address = useSelector(selectAddress);\n  const addressLength = useSelector(selectAddressWidth);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n  const ras = useSelector(selectRas);\n  const cas = useSelector(selectCas);\n\n  const setPinsAct = useAction(setPins);\n  const setPinsWidthAct = useAction(setPinsTypeWidth);\n\n  const setAddressLength = (width) => setPinsWidthAct(PINS.ADDRESS, width);\n  const setAddress = (address) => setPinsAct(PINS.ADDRESS, address);\n\n  const handleInputAddressLength = (ev) => setAddressLength(+ev.target.value);\n\n  return (\n    <div className={b(\"addressBlock\")}>\n      <label className={b(\"addressLabel\")}>\n        <div>\n          Address: {address}\n          {\"_\".repeat(addressLength - address.length)} ({parseInt(address, 2)})\n        </div>\n        <div className={b(\"bitsWidth\")}>width: {addressLength} bits</div>\n        <input\n          name=\"addressLength\"\n          type=\"range\"\n          min={2}\n          max={8}\n          defaultValue={addressLength}\n          onInput={handleInputAddressLength}\n        />\n      </label>\n      <div className={b(\"addressPins\")}>\n        <Pins binaryData={address} setBinaryData={setAddress} />\n        {isRasCasEnabled && (\n          <>\n            <div className={b(\"ras\")}>\n              <span className={b(\"rasLabel\", [ras === PIN_STATE.ON && \"active\"])}>ras</span>\n              <Pins binaryData={ras} isDisabled />\n            </div>\n            <div className={b(\"cas\")}>\n              <span className={b(\"casLabel\", [cas === PIN_STATE.ON && \"active\"])}>cas</span>\n              <Pins binaryData={cas} isDisabled />\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AddressControls;\n","import React from \"react\";\nimport Pins from \"../PinsBlock\";\nimport BEM from \"../../helpers/BEM\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setPins } from \"../../redux/actions\";\nimport { useSelector } from \"react-redux\";\nimport { selectMemoryState, selectEnabled } from \"../../redux/reducers/pinsInfo.red\";\nimport { MEMORY_MODE, MEMORY_STATE, PINS } from \"../../helpers/consts\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst StateControls = () => {\n  const memoryState = useSelector(selectMemoryState);\n  const enabled = useSelector(selectEnabled);\n\n  const setPinsAct = useAction(setPins);\n\n  const setMemoryState = (readWrite) => setPinsAct(PINS.READ_WRITE, readWrite);\n  const setEnabled = () => {\n    setPinsAct(PINS.ENABLED, enabled === MEMORY_STATE.ENABLED ? MEMORY_STATE.DISABLED : MEMORY_STATE.ENABLED);\n  };\n\n  return (\n    <div>\n      <div className={b(\"enabledBlock\")}>\n        <label onClick={setEnabled} className={b(\"enabledLabel\", [enabled === MEMORY_STATE.ENABLED && \"enabled\"])}>\n          Enable\n        </label>\n        <Pins binaryData={enabled} setBinaryData={setEnabled} />\n      </div>\n      <div className={b(\"readWriteBlock\")}>\n        <label className={b(\"readWriteLabel\")}>\n          <span\n            className={b(\"read\", [memoryState === MEMORY_MODE.READ && \"enabled\"])}\n            onClick={() => setMemoryState(MEMORY_MODE.READ)}\n          >\n            Read\n          </span>\n          /\n          <span\n            className={b(\"write\", [memoryState === MEMORY_MODE.WRITE && \"enabled\"])}\n            onClick={() => setMemoryState(MEMORY_MODE.WRITE)}\n          >\n            Write\n          </span>\n        </label>\n        <Pins binaryData={memoryState} setBinaryData={setMemoryState} />\n      </div>\n    </div>\n  );\n};\n\nexport default StateControls;\n","import React from \"react\";\nimport Pins from \"../PinsBlock\";\nimport BEM from \"../../helpers/BEM\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setTacts } from \"../../redux/actions\";\nimport { selectClock, selectCurrentTacts } from \"../../redux/reducers/pinsInfo.red\";\nimport { useSelector } from \"react-redux\";\nimport { selectTacts } from \"../../redux/reducers/pinsInfo.red\";\nimport { useTacting } from \"../../hooks\";\nimport { PIN_STATE } from \"../../helpers/consts\";\nimport { selectIsTactingEnabled } from \"../../redux/reducers/visualizationSettings.red\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst ClockControls = () => {\n  const isTactingEnabled = useSelector(selectIsTactingEnabled);\n\n  const clock = useSelector(selectClock);\n  const tacts = useSelector(selectTacts);\n  const currentTacts = useSelector(selectCurrentTacts);\n  const setTactsAct = useAction(setTacts);\n\n  const [handleClock] = useTacting();\n\n  return (\n    <div className={b(\"clockPinBlock\", [isTactingEnabled ? \"visible\" : \"hidden\"])}>\n      <label className={b(\"clockLabel\")}>\n        <div onClick={handleClock} className={b(\"clock\", [clock === PIN_STATE.ON && \"enabled\"])}>\n          Clock <span className={b(\"currentTacts\")}>({currentTacts} tacts left)</span>\n        </div>\n        <div className={b(\"tacts\")}>\n          <input\n            type=\"number\"\n            className={b(\"tactsNumber\")}\n            value={tacts}\n            onChange={(ev) => setTactsAct(ev.target.value)}\n          />{\" \"}\n          Tacts <span className={b(\"tactsNote\")}>determined by the hardware producer</span>\n        </div>\n      </label>\n      <Pins binaryData={clock} setBinaryData={handleClock} />\n    </div>\n  );\n};\n\nexport default ClockControls;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useAction } from \"../../hooks/reactRedux.hks\";\n\nimport { useControlMemorySize, useControlMemoryDatumWidth, useReadWriteMemoryDatum } from \"../../hooks\";\nimport DataControls from \"./DataControls\";\nimport AddressControls from \"./AddressControls\";\nimport BEM from \"../../helpers/BEM\";\nimport StateControls from \"./StateControls\";\nimport ClockControls from \"./ClockControls\";\nimport ToggleButtons from \"../ToggleButtons\";\n\nimport {\n  setIsPinNotationClassical,\n  setIsTactingEnabled,\n  setMemoryDisplayType,\n  setIsRasCasEnabled,\n  setCurrentTacts,\n} from \"../../redux/actions\";\nimport {\n  selectIsPinNotationClassical,\n  selectIsTactingEnabled,\n  selectMemoryDisplayType,\n  selectIsRasCasEnabled,\n} from \"../../redux/reducers/visualizationSettings.red\";\n\nimport \"./MemoryControls.scss\";\n\nconst b = BEM(\"MemoryControls\");\n\nconst pinNotationOptions = [\n  { value: false, label: \"Default\" },\n  { value: true, label: \"Classical\" },\n];\n\nconst MemoryControls = () => {\n  const setIsPinNotationClassicalAct = useAction(setIsPinNotationClassical);\n  const isPinNotationClassical = useSelector(selectIsPinNotationClassical);\n\n  useControlMemorySize();\n  useControlMemoryDatumWidth();\n  useReadWriteMemoryDatum();\n\n  return (\n    <span className={b()}>\n      <ToggleButtons\n        containerClassName={b(\"viewOptions\")}\n        options={pinNotationOptions}\n        selectedValue={isPinNotationClassical}\n        handleSelect={setIsPinNotationClassicalAct}\n      />\n      <DataControls />\n      <AddressControls />\n      <StateControls />\n      <ClockControls />\n    </span>\n  );\n};\n\nexport default MemoryControls;\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { useAction } from \"../../hooks/reactRedux.hks\";\nimport { setIsTactingEnabled, setIsRasCasEnabled, setCurrentTacts } from \"../../redux/actions\";\nimport { selectIsTactingEnabled, selectIsRasCasEnabled } from \"../../redux/reducers/visualizationSettings.red\";\n\nimport BEM from \"../../helpers/BEM\";\nimport \"./VisualizationSettings.scss\";\n\nconst b = BEM(\"VisualizationSettings\");\n\nconst VisualizationSettings = () => {\n  const isTactingEnabled = useSelector(selectIsTactingEnabled);\n  const isRasCasEnabled = useSelector(selectIsRasCasEnabled);\n\n  const setIsTactingEnabledAct = useAction(setIsTactingEnabled);\n  const setCurrentTactsAct = useAction(setCurrentTacts);\n  const setIsRasCasEnabledAct = useAction(setIsRasCasEnabled);\n\n  useEffect(() => {\n    if (!isTactingEnabled) setCurrentTactsAct(0);\n  }, [isTactingEnabled, setCurrentTactsAct]);\n\n  return (\n    <div className={b()}>\n      <label className={b(\"tacting\")}>\n        <input\n          className={b(\"tactingInput\")}\n          type=\"checkbox\"\n          checked={isTactingEnabled}\n          onChange={() => setIsTactingEnabledAct(!isTactingEnabled)}\n        />\n        Tacting\n      </label>\n      <label className={b(\"rasCas\")}>\n        <input\n          className={b(\"rasCasInput\")}\n          type=\"checkbox\"\n          checked={isRasCasEnabled}\n          onChange={() => setIsRasCasEnabledAct(!isRasCasEnabled)}\n        />\n        RAS / CAS\n      </label>\n    </div>\n  );\n};\n\nexport default VisualizationSettings;\n","import React from \"react\";\nimport Memory from \"../Memory\";\nimport BEM from \"../../helpers/BEM\";\n\nimport \"./RamVisualization.scss\";\nimport MemoryControls from \"../MemoryControls\";\nimport VisualizationSettings from \"../VisualizationSettings\";\n\nconst b = BEM(\"RamVisualization\");\n\nfunction RamVisualization() {\n  return (\n    <div className={b()}>\n      <div className={b(\"caption\")}>\n        <h1 className={b(\"header\")}>RAM Visualization</h1>\n        <VisualizationSettings />\n      </div>\n      <div className={b(\"visualization\")}>\n        <div className={b(\"pins\")}>\n          <MemoryControls />\n        </div>\n        <div className={b(\"memory\")}>\n          <Memory />\n        </div>\n      </div>\n      <div className={b(\"notes\")}>\n        <div>＊ LSB - Least Significant Bit (right-most bit)</div>\n        <div>＊ MSB - Most Significant Bit (left-most bit)</div>\n      </div>\n    </div>\n  );\n}\n\nexport default RamVisualization;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport pinsInfo from \"./pinsInfo.red\";\nimport memory from \"./memory.red\";\nimport visualizationSettings from \"./visualizationSettings.red\";\n\nexport default combineReducers({ memory, pinsInfo, visualizationSettings });\n","import { takeEvery, put, all, select } from \"redux-saga/effects\";\nimport {\n  SET_SELECTED_ADDRESS_IN_MEMORY,\n  setAddressRowInMemory,\n  setAddressColumnInMemory,\n  SET_IS_RAS_CAS_ENABLED,\n  setPins,\n  SET_SELECTED_COL_IN_MEMORY,\n  setSelectedAddressInMemory,\n  toggleRasCas,\n  setCurrentTacts,\n  SET_CLOCK_PIN,\n  SET_CURRENT_TACTS,\n  SET_IS_TACTING_ENABLED,\n} from \"../actions\";\nimport { PINS, PIN_STATE } from \"../../helpers/consts\";\nimport { selectSelectedRow } from \"../reducers/memory.red\";\nimport { isEmpty } from \"ramda\";\nimport { selectIsRasCasEnabled } from \"../reducers/visualizationSettings.red\";\nimport { selectTacts, selectCurrentTacts } from \"../reducers/pinsInfo.red\";\n\nfunction* resetAddressRowAndCol(data) {\n  if (!data.payload) {\n    yield put(setAddressRowInMemory(\"\"));\n    yield put(setAddressColumnInMemory(\"\"));\n  }\n}\n\nfunction* enableRasCasPins(action) {\n  if (action.payload.isEnabled) {\n    const ramLatency = yield select(selectTacts);\n    yield put(setPins(PINS.RAS, PIN_STATE.ON));\n    yield put(setCurrentTacts(ramLatency));\n  }\n}\n\nfunction* onSetTacting(action) {\n  if (action.payload.isEnabled) {\n    const ramLatency = yield select(selectTacts);\n    yield put(setCurrentTacts(ramLatency));\n  }\n}\n\nfunction* constructSelectedMemoryAddress(action) {\n  const selectedCol = action.payload;\n  const selectedRow = yield select(selectSelectedRow);\n  if (!isEmpty(selectedCol) && !isEmpty(selectedRow)) {\n    yield put(setSelectedAddressInMemory(`${selectedRow}${selectedCol}`));\n  }\n}\n\nfunction* updateNumberOfTacts(action) {\n  const currentTacts = yield select(selectCurrentTacts);\n  const clock = action.payload;\n  const isRasCasEnabled = yield select(selectIsRasCasEnabled);\n  const ramLatency = yield select(selectTacts);\n  if (clock === PIN_STATE.ON) {\n    yield put(setCurrentTacts(currentTacts - 1));\n  }\n\n  if (currentTacts === 0 && clock === PIN_STATE.OFF) {\n    // Reset current tacts to ramLatency, defined by hardware producer\n    yield put(setCurrentTacts(ramLatency));\n    if (isRasCasEnabled) {\n      // Change RAS to CAS and vice versa in case RAS/CAS is enabled and current tacts reached 0\n      yield put(toggleRasCas());\n    }\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeEvery(SET_SELECTED_ADDRESS_IN_MEMORY, resetAddressRowAndCol),\n    takeEvery(SET_IS_RAS_CAS_ENABLED, enableRasCasPins),\n    takeEvery(SET_IS_TACTING_ENABLED, onSetTacting),\n    takeEvery(SET_SELECTED_COL_IN_MEMORY, constructSelectedMemoryAddress),\n    takeEvery(SET_CLOCK_PIN, updateNumberOfTacts),\n  ]);\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducers from \"./redux/reducers\";\nimport sagas from \"./redux/sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = composeWithDevTools({});\n\nconst configureStore = () => {\n  const store = createStore(reducers, composeEnhancers(applyMiddleware(sagaMiddleware)));\n  sagaMiddleware.run(sagas);\n  return store;\n};\n\nexport default configureStore();\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport RamVisualization from \"./components/RamVisualization\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./commonStyles/index.scss\";\n\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <RamVisualization />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}